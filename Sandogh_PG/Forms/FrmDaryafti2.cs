using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
//using Microsoft.Office.Interop.Excel;
using DataTable = System.Data.DataTable;
using System.Security.Principal;
using Microsoft.Office.Interop.Excel;
using System.Diagnostics;

namespace Sandogh_PG.Forms
{
    public partial class FrmDaryafti2 : DevExpress.XtraEditors.XtraForm
    {
        public FrmMain Fm;
        public FrmDaryafti2(FrmMain fm)
        {
            InitializeComponent();
            Fm = fm;
            //        // This line of code is generated by Data Source Configuration Wizard
            //        // Instantiate a new DBContext
            //        Sandogh_PG.MyContext dbContext = new Sandogh_PG.MyContext();
            //        // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //        dbContext.CodeMoins.LoadAsync().ContinueWith(loadTask =>
            //        {
            //// Bind data to control when loading complete
            //cmbMoinP1.Properties.DataSource = dbContext.CodeMoins.Local.ToBindingList();
            //        }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //        Sandogh_PG.MyContext dbContext = new Sandogh_PG.MyContext();
            //        // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //        dbContext.CodeMoins.LoadAsync().ContinueWith(loadTask =>
            //        {
            //// Bind data to control when loading complete
            //codeMoinsBindingSource.DataSource = dbContext.CodeMoins.Local.ToBindingList();
            //        }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //        Sandogh_PG.MyContext dbContext = new Sandogh_PG.MyContext();
            //        // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //        dbContext.AllHesabTafzilis.LoadAsync().ContinueWith(loadTask =>
            //        {
            //            // Bind data to control when loading complete
            //            cmbNameHesabP1.Properties.DataSource = dbContext.AllHesabTafzilis.Local.ToBindingList();
            //        }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            //        // This line of code is generated by Data Source Configuration Wizard
            //        // Instantiate a new DBContext
            //        Sandogh_PG.MyContext dbContext = new Sandogh_PG.MyContext();
            //        // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //        dbContext.AllHesabTafzilis.LoadAsync().ContinueWith(loadTask =>
            //        {
            //// Bind data to control when loading complete
            //cmbNameHesabA1.Properties.DataSource = dbContext.AllHesabTafzilis.Local.ToBindingList();
            //        }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        int Month = 0;

        public void FillcmbHesabMoin()
        {
            using (var db = new MyContext())
            {
                try
                {
                    var q1 = db.CodeMoins.OrderBy(s => s.Code).AsParallel();
                    if (q1.Count() > 0)
                        codeMoinsBindingSource.DataSource = q1;
                    else
                        codeMoinsBindingSource.DataSource = null;
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        public void FillcmbNameHesab()
        {
            using (var db = new MyContext())
            {
                try
                {

                    int _HesabMoinId = Convert.ToInt32(cmbMoin.EditValue);
                    var q = db.CodeMoins.FirstOrDefault(f => f.Id == _HesabMoinId);
                    if (q != null)
                    {
                        switch (q.Code)
                        {
                            case 1001:
                                {
                                    var q1 = db.AllHesabTafzilis.Where(f => f.GroupTafziliId == 1 || f.GroupTafziliId == 2).OrderBy(s => s.Code).ToList();
                                    if (q1.Count > 0)
                                        cmbNameHesab.Properties.DataSource = q1.Where(f => f.IsActive == true).OrderBy(s => s.Code).ToList();
                                    else
                                        cmbNameHesab.Properties.DataSource = null;
                                    break;
                                }
                            case 2001:
                                {
                                    var q1 = db.AllHesabTafzilis.Where(f => f.GroupTafziliId == 3).OrderBy(s => s.Code).ToList();
                                    if (q1.Count > 0)
                                        cmbNameHesab.Properties.DataSource = q1.Where(f => f.IsActive == true).OrderBy(s => s.Code).ToList();
                                    else
                                        cmbNameHesab.Properties.DataSource = null;
                                    break;
                                }
                            case 2002:
                                {
                                    goto case 2001;
                                }
                            case 2003:
                                {
                                    goto case 2001;
                                }
                            case 3001:
                                {
                                    goto case 2001;
                                }
                            case 4001:
                                {
                                    goto case 2001;
                                }
                            case 5001:
                                {
                                    var q1 = db.AllHesabTafzilis.Where(f => f.GroupTafziliId == 6).OrderBy(s => s.Code).ToList();
                                    if (q1.Count > 0)
                                        cmbNameHesab.Properties.DataSource = q1.Where(f => f.IsActive == true).OrderBy(s => s.Code).ToList();
                                    else
                                        cmbNameHesab.Properties.DataSource = null;
                                    break;
                                }
                            case 6001:
                                {
                                    goto case 2001;
                                }
                            case 6002:
                                {
                                    goto case 2001;
                                }
                            case 6003:
                                {
                                    goto case 2001;
                                }
                            case 7001:
                                {
                                    goto case 2001;
                                }
                            case 8001:
                                {
                                    var q1 = db.AllHesabTafzilis.Where(f => f.GroupTafziliId == 4).OrderBy(s => s.Code).ToList();
                                    if (q1.Count > 0)
                                        cmbNameHesab.Properties.DataSource = q1.Where(f => f.IsActive == true).OrderBy(s => s.Code).ToList();
                                    else
                                        cmbNameHesab.Properties.DataSource = null;
                                    break;
                                }
                            case 9001:
                                {
                                    var q1 = db.AllHesabTafzilis.Where(f => f.GroupTafziliId == 5).OrderBy(s => s.Code).ToList();
                                    if (q1.Count > 0)
                                        cmbNameHesab.Properties.DataSource = q1.Where(f => f.IsActive == true).OrderBy(s => s.Code).ToList();
                                    else
                                        cmbNameHesab.Properties.DataSource = null;
                                    break;
                                }
                        }
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        public void SelectMonth()
        {
            Month = Convert.ToInt32(txtTarikhSanad1.Text.Substring(5, 2));
            switch (Month)
            {
                case 1:
                    cmbMonth1.SelectedIndex = 0;
                    break;
                case 2:
                    cmbMonth1.SelectedIndex = 1;
                    break;
                case 3:
                    cmbMonth1.SelectedIndex = 2;
                    break;
                case 4:
                    cmbMonth1.SelectedIndex = 3;
                    break;
                case 5:
                    cmbMonth1.SelectedIndex = 4;
                    break;
                case 6:
                    cmbMonth1.SelectedIndex = 5;
                    break;
                case 7:
                    cmbMonth1.SelectedIndex = 6;
                    break;
                case 8:
                    cmbMonth1.SelectedIndex = 7;
                    break;
                case 9:
                    cmbMonth1.SelectedIndex = 8;
                    break;
                case 10:
                    cmbMonth1.SelectedIndex = 9;
                    break;
                case 11:
                    cmbMonth1.SelectedIndex = 10;
                    break;
                case 12:
                    cmbMonth1.SelectedIndex = 11;
                    break;
            }
        }

        //TextEdit _txtSal;
        //ComboBoxEdit _cmbMonth;
        string IndexMah = string.Empty;
        public void FillDataGridViewFromDatabase()
        {
            //DataSet ds = new DataSet();
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            using (var db = new MyContext())
            {
                try
                {
                    // int _Sal = Convert.ToInt32(_txtSal.Text);
                    //int _IndexMonth = _cmbMonth.SelectedIndex;
                    // dt.Columns.Add("AazaId");
                    dt1.Columns.Add("CodeHesab");
                    dt1.Columns.Add("NameAaza");
                    dt1.Columns.Add("MablaghPasandaz");
                    dt1.Columns.Add("MablaghAghsat");
                    dt1.Columns.Add("CodeVam");
                    dt1.Columns["MablaghPasandaz"].DataType = typeof(Decimal);
                    dt1.Columns["MablaghAghsat"].DataType = typeof(Decimal);

                    dt2.Columns.Add("CodeHesab");
                    dt2.Columns.Add("NameAaza");
                    dt2.Columns.Add("MablaghPasandaz");
                    dt2.Columns.Add("MablaghAghsat");
                    dt2.Columns.Add("CodeVam");
                    dt2.Columns["MablaghPasandaz"].DataType = typeof(Decimal);
                    dt2.Columns["MablaghAghsat"].DataType = typeof(Decimal);
                    #region MyRegion
                    //var q = db.AazaSandoghs.Where(f => f.IsActive == true && f.IsOzveSandogh == chkIsOzveSandogh.Checked).ToList();


                    //DateTime? StartMonth = null;
                    //DateTime? EndMonth = null;

                    //switch (_cmbMonth.SelectedIndex)
                    //{
                    //    case 0:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/01/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/01/31");
                    //            IndexMah = "01";
                    //            break;
                    //        }
                    //    case 1:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/02/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/02/31");
                    //            IndexMah = "02";
                    //            break;
                    //        }
                    //    case 2:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/03/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/03/31");
                    //            IndexMah = "03";
                    //            break;
                    //        }
                    //    case 3:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/04/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/04/31");
                    //            IndexMah = "04";
                    //            break;
                    //        }
                    //    case 4:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/05/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/05/31");
                    //            IndexMah = "05";
                    //            break;
                    //        }
                    //    case 5:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/06/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/06/31");
                    //            IndexMah = "06";
                    //            break;
                    //        }
                    //    case 6:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/07/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/07/30");
                    //            IndexMah = "07";
                    //            break;
                    //        }
                    //    case 7:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/08/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/08/30");
                    //            IndexMah = "08";
                    //            break;
                    //        }
                    //    case 8:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/09/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/09/30");
                    //            IndexMah = "09";
                    //            break;
                    //        }
                    //    case 9:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/10/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/10/30");
                    //            IndexMah = "10";
                    //            break;
                    //        }
                    //    case 10:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/11/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/11/30");
                    //            IndexMah = "11";
                    //            break;
                    //        }
                    //    case 11:
                    //        {
                    //            StartMonth = Convert.ToDateTime(_txtSal.Text + "/12/01");
                    //            EndMonth = Convert.ToDateTime(_txtSal.Text + "/12/29");
                    //            IndexMah = "12";
                    //            break;
                    //        }
                    //}


                    #endregion
                    var q = db.AazaSandoghs.Where(f => f.IsActive == true).ToList();
                    if (q.Count > 0)
                    {
                        for (int RowCounter = 0; RowCounter < q.Count(); RowCounter++)
                        {
                            DataRow DataRow1 = dt1.NewRow();
                            DataRow1["CodeHesab"] = q[RowCounter].Code;
                            DataRow1["NameAaza"] = q[RowCounter].NameVFamil;
                            decimal _HaghOzviat = q[RowCounter].HaghOzviat == null ? 0 : (decimal)q[RowCounter].HaghOzviat;
                            DataRow1["MablaghPasandaz"] = _HaghOzviat.ToString("n0");
                            DataRow1["MablaghAghsat"] = 0;
                            DataRow1["CodeVam"] = 0;

                            int _AllTafId = q[RowCounter].AllTafId;
                            //var qq1 = db.HaghOzviats.Where(f => f.AazaId == _AllTafId && f.Sal == _Sal).ToList();

                            int _Id = q[RowCounter].Id;
                            var q1 = db.AllHesabTafzilis.FirstOrDefault(f => f.GroupTafziliId == 3 && f.Id2 == _Id);
                            if (q1 != null)
                            {
                                decimal _MablaghAghsat = 0;
                                //var q2 = db.RizeAghsatVams.Where(f => f.AazaId == q1.Id && f.TarikhSarresid <= EndMonth && f.MablaghDaryafti == 0 && f.VamPardakhti1.IsTasviye == false).ToList();
                                var q5 = db.VamPardakhtis.Where(s => s.AazaId == q1.Id && s.IsTasviye == false).Select(s => s.Id).ToList();

                                if (q5.Count > 0)
                                {
                                    for (int i = 0; i < q5.Count; i++)
                                    {
                                        int VamId = q5[i];
                                        var q2 = db.RizeAghsatVams.Where(f => f.AazaId == q1.Id && f.MablaghDaryafti == 0 && f.MablaghAghsat > 0 && f.VamPardakhti1.IsTasviye == false && f.VamPardakhtiId == VamId).ToList();
                                        if (q2.Count > 0)
                                        {
                                            var q3 = q2.Min(s => s.TarikhSarresid);
                                            _MablaghAghsat = q2.FirstOrDefault(s => s.TarikhSarresid == q3).MablaghAghsat;

                                            if (i > 0)
                                            {
                                                DataRow DataRow2 = dt2.NewRow();
                                                //DataRow2 = dt2.NewRow();
                                                DataRow2["CodeHesab"] = q[RowCounter].Code;
                                                DataRow2["NameAaza"] = q[RowCounter].NameVFamil;
                                                DataRow2["MablaghPasandaz"] = 0;
                                                DataRow2["MablaghAghsat"] = _MablaghAghsat.ToString("n0");
                                                DataRow2["CodeVam"] = q2[i].VamPardakhtiCode;
                                                dt2.Rows.Add(DataRow2);
                                            }
                                            else
                                            {
                                                DataRow1["MablaghAghsat"] = _MablaghAghsat.ToString("n0");
                                                DataRow1["CodeVam"] = q2[i].VamPardakhtiCode;
                                                //DataRow1[6] = q3.ToString().Substring(0, 10);

                                                dt1.Rows.Add(DataRow1);

                                            }
                                        }

                                    }
                                }
                                else
                                {
                                    dt1.Rows.Add(DataRow1);
                                }
                            }

                            //gridView1.Columns["Tozihat"].Caption = "سررسید قسط";

                        }
                        dt1.Merge(dt2);
                        dt1.AcceptChanges();
                        //DataTable dt= dt1 + dt2;
                        gridControl1.DataSource = dt1;
                    }
                    else
                        gridControl1.DataSource = null;
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                       "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }


        }


        private void FrmDaryafti2_Load(object sender, EventArgs e)
        {
            using (var db = new MyContext())
            {
                try
                {
                    HelpClass1.DateTimeMask(txtTarikhSanad1);
                    txtTarikhSanad1.Text = DateTime.Now.ToString().Substring(0, 10);
                    txtSal1.Text = txtTarikhSanad1.Text.Substring(0, 4);
                    SelectMonth();
                    FillcmbHesabMoin();
                    //txtSharhP1.Text = "دریافت بابت وجه پس انداز";
                    //txtSharhA1.Text = "دریافت بابت وجه اقساط وام";

                    int _SandoghId = Convert.ToInt32(Fm.IDSandogh.Caption);
                    var q2 = db.Tanzimats.FirstOrDefault(s => s.Id == _SandoghId);
                    if (q2 != null)
                    {
                        cmbMoinP1.EditValue = cmbMoinA1.EditValue = q2.MoinDefaultId;
                        cmbNameHesabP1.EditValue = cmbNameHesabA1.EditValue = q2.TafsiliDefaultId;

                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

            }

        }

        LookUpEdit cmbMoin;
        LookUpEdit cmbNameHesab;
        private void cmbMoinP1_EditValueChanged(object sender, EventArgs e)
        {
            cmbMoin = new LookUpEdit();
            cmbNameHesab = new LookUpEdit();
            cmbMoin = cmbMoinP1;
            cmbNameHesab = cmbNameHesabP1;
            FillcmbNameHesab();
        }

        private void cmbMoinA1_EditValueChanged(object sender, EventArgs e)
        {
            cmbMoin = new LookUpEdit();
            cmbNameHesab = new LookUpEdit();
            cmbMoin = cmbMoinA1;
            cmbNameHesab = cmbNameHesabA1;
            FillcmbNameHesab();
        }

        private void btnGetInfoDataBase_Click(object sender, EventArgs e)
        {
            if (gridControl1.DataSource == null)
            {
                FillDataGridViewFromDatabase();
            }
            else if (XtraMessageBox.Show("آیا اطلاعات مجدداً از دیتابیس بارگزاری شود؟",
                         "پیغام", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                FillDataGridViewFromDatabase();

            }
        }

        private void gridView1_CustomDrawRowIndicator(object sender, DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs e)
        {
            HelpClass1.CustomDrawRowIndicator(sender, e, gridView1);
        }

        DataTable DataTable1;
        private bool IsValidat()
        {
            using (var db = new MyContext())
            {
                try
                {
                    if (string.IsNullOrEmpty(txtTarikhSanad1.Text))
                    {
                        XtraMessageBox.Show("لطفاً تاریخ سند را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtSal1.Text))
                    {
                        XtraMessageBox.Show("لطفاً سال را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (cmbMonth1.SelectedIndex == -1)
                    {
                        XtraMessageBox.Show("لطفاً ماه را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (Convert.ToInt32(cmbMoinP1.EditValue) == 0)
                    {
                        XtraMessageBox.Show("لطفاً حساب معین وجه پس انداز را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (Convert.ToInt32(cmbNameHesabP1.EditValue) == 0)
                    {
                        XtraMessageBox.Show("لطفاً حساب تفصیل وجه پس انداز را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (Convert.ToInt32(cmbMoinA1.EditValue) == 0)
                    {
                        XtraMessageBox.Show("لطفاً حساب معین وجه اقساط را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (Convert.ToInt32(cmbNameHesabA1.EditValue) == 0)
                    {
                        XtraMessageBox.Show("لطفاً حساب تفصیل وجه اقساط را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (gridView1.RowCount == 0)
                    {
                        XtraMessageBox.Show("اطلاعاتی برای پردازش وجود ندارد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else
                    {
                        DataTable1 = new DataTable();
                        DataTable1 = HelpClass1.ConvettDatagridviewToDataTable(gridView1, gridView1.RowCount - 1);
                        var q1 = db.AazaSandoghs.Where(f => f.IsActive == true);
                        var q2 = db.VamPardakhtis.Where(f => f.IsTasviye == false);
                        if (q1.Count() > 0)
                        {
                            //var CodeHesab = dt.Rows[0];
                            //var CodeVam = dt.Columns[4];
                            for (int i = 0; i < DataTable1.Rows.Count; i++)
                            {
                                int CodeHesab = string.IsNullOrEmpty(DataTable1.Rows[i][0].ToString()) ? 0 : Convert.ToInt32(DataTable1.Rows[i][0].ToString());
                                if (CodeHesab == 0 || string.IsNullOrEmpty(CodeHesab.ToString()) || !q1.Any(f => f.Code == CodeHesab))
                                {
                                    XtraMessageBox.Show("کد حساب در ردیف " + (i + 1) + " صحیح نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return false;
                                }
                                if (q2.Count() > 0)
                                {
                                    var CodeVam = string.IsNullOrEmpty(DataTable1.Rows[i][4].ToString()) ? 0 : Convert.ToInt32(DataTable1.Rows[i][4].ToString());
                                    decimal MablghAghsat = string.IsNullOrEmpty(DataTable1.Rows[i][3].ToString()) ? 0 : Convert.ToDecimal(DataTable1.Rows[i][3].ToString());

                                    if (MablghAghsat > 0)
                                    {
                                        if (CodeVam == 0 || string.IsNullOrEmpty(CodeVam.ToString()) || !q2.Any(f => f.Code == CodeVam))
                                        {
                                            XtraMessageBox.Show("کد وام در ردیف " + (i + 1) + " صحیح نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }
                                    }
                                    else if (CodeVam > 0)
                                    {
                                        XtraMessageBox.Show("مبلغ وام در ردیف " + (i + 1) + " صحیح نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return false;
                                    }

                                    if (CodeVam > 0)
                                    {
                                        int _AazaId = q1.FirstOrDefault(s => s.Code == CodeHesab).AllTafId;
                                        var q = db.RizeAghsatVams.Any(s => s.VamPardakhtiCode == CodeVam && s.AazaId == _AazaId);
                                        if (q==false)
                                        {
                                            XtraMessageBox.Show(" در ردیف " + (i + 1) + " وام شماره "+ CodeVam + " مربوط به کد حساب "+ CodeHesab + " نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;

                                        }
                                    }
 
                                }
                            }
                            return true;
                        }
                        else
                        {
                            return false;
                        }

                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }


        }
        private void btnTestInfo_Click(object sender, EventArgs e)
        {
            if (IsValidat())
            {
                DialogResult dr = XtraMessageBox.Show("تست درستی اطلاعات انجام شد آیا صدور سند انجام شود؟ \n" + "توجه : لطفاً قبل از صدور سند از اطلاعات فعلی بکاپ گرفته شود", "پیغام", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if (dr == DialogResult.Yes)
                {
                    using (var db = new MyContext())
                    {
                        try
                        {
                            List<HaghOzviat> ListHaghOzviat = new List<HaghOzviat>();
                            //List<RizeAghsatVam> ListRizeAghsatVam = new List<RizeAghsatVam>();
                            List<AsnadeHesabdariRow> ListAsnadeHesabdariRow = new List<AsnadeHesabdariRow>();
                            var allHesabtafsili = db.AllHesabTafzilis.Where(f => f.IsActive == true);
                            var ShomareAsnadeHesabdari = db.AsnadeHesabdariRows.Any() ? db.AsnadeHesabdariRows.Max(f => f.ShomareSanad) : 0;
                            var SeryalHaghOzviat = db.HaghOzviats.Any() ? db.HaghOzviats.Max(f => f.Seryal) : 0;
                            var SeryalAghsat = db.RizeAghsatVams.Any() ? db.RizeAghsatVams.Max(f => f.SeryalDaryaft) : 0;

                            DateTime TarikhSanad = Convert.ToDateTime(txtTarikhSanad1.Text.Substring(0, 10));
                            int Sal = Convert.ToInt32(txtSal1.Text);
                            int IndexMonth = Convert.ToInt32(cmbMonth1.SelectedIndex);
                            string NameMonth = cmbMonth1.Text;
                            int HesabMoinIdP1 = Convert.ToInt32(cmbMoinP1.EditValue);
                            string HesabMoinNameP1 = cmbMoinP1.Text;
                            int HesabMoinIdA1 = Convert.ToInt32(cmbMoinA1.EditValue);
                            string HesabMoinNameA1 = cmbMoinA1.Text;
                            int HesabTafsiliIdP1 = Convert.ToInt32(cmbNameHesabP1.EditValue);
                            string HesabTafsiliNameP1 = cmbNameHesabP1.Text;
                            int HesabTafsiliIdA1 = Convert.ToInt32(cmbNameHesabA1.EditValue);
                            string HesabTafsiliNameA1 = cmbNameHesabA1.Text;
                            int ShomarandeSanad = ShomareAsnadeHesabdari;
                            int _SalMaliId = Convert.ToInt32(Fm.IDSalMali.Caption);

                            var z1 = db.RizeAghsatVams;
                            for (int i = 0; i < DataTable1.Rows.Count; i++)
                            {
                                // ثبت پس انداز ماهیانه
                                decimal MablaghPasandaz = string.IsNullOrEmpty(DataTable1.Rows[i][2].ToString()) ? 0 : Convert.ToDecimal(DataTable1.Rows[i][2].ToString());
                                int CodeHesabAaza = string.IsNullOrEmpty(DataTable1.Rows[i][0].ToString()) ? 0 : Convert.ToInt32(DataTable1.Rows[i][0].ToString());

                                var _allHesabtafsili = allHesabtafsili.FirstOrDefault(f => f.Code == CodeHesabAaza);

                                if (MablaghPasandaz > 0)
                                {
                                    ShomarandeSanad += 1;
                                    string _SharhPasandaz = "دریافتی از " + _allHesabtafsili.Name + " بابت پس انداز " + NameMonth + " ماه " + Sal;

                                    HaghOzviat obj01 = new HaghOzviat();
                                    obj01.AazaId = _allHesabtafsili.Id;
                                    obj01.NameAaza = _allHesabtafsili.Name;
                                    obj01.Seryal = SeryalHaghOzviat + i + 1;
                                    obj01.Tarikh = TarikhSanad;
                                    obj01.Mablagh = MablaghPasandaz;
                                    obj01.NameHesabId = HesabTafsiliIdP1;
                                    obj01.NameHesab = HesabTafsiliNameP1;
                                    obj01.IndexMonth = IndexMonth;
                                    obj01.Month = NameMonth;
                                    obj01.Sal = Sal;
                                    obj01.Sharh = _SharhPasandaz;
                                    obj01.SalMaliId = _SalMaliId;
                                    obj01.ShomareSanad = ShomarandeSanad;

                                    ListHaghOzviat.Add(obj01);
                                    ////////////////////////////////////////////////////////////////////////
                                    var qq1 = db.CodeMoins.FirstOrDefault(f => f.Id == HesabMoinIdP1);
                                    var qq2 = allHesabtafsili.FirstOrDefault(f => f.Id == HesabTafsiliIdP1);
                                    AsnadeHesabdariRow obj1 = new AsnadeHesabdariRow();
                                    obj1.ShomareSanad = ShomarandeSanad;
                                    obj1.Tarikh = TarikhSanad;
                                    obj1.HesabMoinId = HesabMoinIdP1;
                                    obj1.HesabMoinCode = qq1.Code;
                                    obj1.HesabMoinName = qq1.Name;
                                    obj1.HesabTafId = HesabTafsiliIdP1;
                                    obj1.HesabTafCode = qq2.Code;
                                    obj1.HesabTafName = qq2.Name;
                                    obj1.Bed = MablaghPasandaz;
                                    obj1.Sharh = _SharhPasandaz;
                                    obj1.SalMaliId = _SalMaliId;

                                    ListAsnadeHesabdariRow.Add(obj1);


                                    var qq3 = db.CodeMoins.FirstOrDefault(f => f.Code == 7001);
                                    var qq4 = _allHesabtafsili;
                                    AsnadeHesabdariRow obj2 = new AsnadeHesabdariRow();
                                    obj2.ShomareSanad = ShomarandeSanad;
                                    obj2.Tarikh = TarikhSanad;
                                    obj2.HesabMoinId = qq3.Id;
                                    obj2.HesabMoinCode = 7001;
                                    obj2.HesabMoinName = qq3.Name;
                                    obj2.HesabTafId = qq4.Id;
                                    obj2.HesabTafCode = qq4.Code;
                                    obj2.HesabTafName = qq4.Name;
                                    obj2.Bes = MablaghPasandaz;
                                    obj2.Sharh = _SharhPasandaz;
                                    obj2.SalMaliId = _SalMaliId;

                                    ListAsnadeHesabdariRow.Add(obj2);



                                }

                                // ثبت افساط ماهیانه
                                decimal MablaghAghsat = string.IsNullOrEmpty(DataTable1.Rows[i][3].ToString())?0: Convert.ToDecimal(DataTable1.Rows[i][3].ToString());
                                int CodeVam = string.IsNullOrEmpty(DataTable1.Rows[i][4].ToString())?0: Convert.ToInt32(DataTable1.Rows[i][4].ToString());
                                //int CodeVam = Convert.ToInt32(DataTable1.Rows[i][4].ToString());

                                if (MablaghAghsat > 0 && CodeVam > 0)
                                {
                                    var pp1 = db.RizeAghsatVams.Where(s => s.VamPardakhtiCode == CodeVam);
                                    var pp2 = pp1.Where(s => s.MablaghDaryafti == 0);
                                    var pp3 = pp2.Min(s => s.ShomareGhest);
                                    if (pp3 > 0)
                                    {
                                        ShomarandeSanad += 1;
                                        string _SharhAghsat = "دریافتی از " + _allHesabtafsili.Name + " بابت قسط وام ش " + CodeVam;
                                        var p = db.CodeMoins.AsParallel();
                                        int _IndexNoeVam = db.VamPardakhtis.FirstOrDefault(s => s.Code == CodeVam).IndexNoeVam;
                                        int _CodeMoin = 0;

                                        switch (_IndexNoeVam)
                                        {
                                            case 0:
                                                {
                                                    _CodeMoin = 2001;
                                                    break;
                                                }
                                            case 1:
                                                {
                                                    _CodeMoin = 2002;
                                                    break;
                                                }
                                            case 2:
                                                {
                                                    _CodeMoin = 2003;
                                                    break;
                                                }
                                            default:
                                                {
                                                    _CodeMoin = 0;
                                                    break;
                                                }
                                        }



                                        var q = pp2.FirstOrDefault(s => s.ShomareGhest == pp3);
                                        if (q != null)
                                        {
                                            z1.FirstOrDefault(s=>s.Id==q.Id).SeryalDaryaft = SeryalAghsat + i + 1;
                                            z1.FirstOrDefault(s=>s.Id==q.Id).TarikhDaryaft = TarikhSanad;
                                            z1.FirstOrDefault(s=>s.Id==q.Id).MablaghDaryafti = MablaghAghsat;
                                            z1.FirstOrDefault(s=>s.Id==q.Id).NameHesabId = HesabTafsiliIdA1;
                                            z1.FirstOrDefault(s=>s.Id==q.Id).NameHesab = HesabTafsiliNameA1;
                                            z1.FirstOrDefault(s=>s.Id==q.Id).Sharh = _SharhAghsat;
                                            z1.FirstOrDefault(s => s.Id == q.Id).ShomareSanad = ShomarandeSanad;
                                            
                                            //db.SaveChanges();
                                            //////////////////////////////////////////////////////////////////////////////////////////
                                            ///

                                            ////////////////////////////////////////////////////////////////////////
                                            var qq1 = p.FirstOrDefault(f => f.Id == HesabMoinIdA1);
                                            var qq2 = allHesabtafsili.FirstOrDefault(f => f.Id == HesabTafsiliIdA1);
                                            AsnadeHesabdariRow obj1 = new AsnadeHesabdariRow();
                                            obj1.ShomareSanad = ShomarandeSanad;
                                            obj1.Tarikh = TarikhSanad;
                                            obj1.HesabMoinId = HesabMoinIdA1;
                                            obj1.HesabMoinCode = qq1.Code;
                                            obj1.HesabMoinName = qq1.Name;
                                            obj1.HesabTafId = HesabTafsiliIdA1;
                                            obj1.HesabTafCode = qq2.Code;
                                            obj1.HesabTafName = qq2.Name;
                                            obj1.Bed = MablaghAghsat;
                                            obj1.Sharh = _SharhAghsat;
                                            obj1.SalMaliId = _SalMaliId;
                                            
                                            ListAsnadeHesabdariRow.Add(obj1);


                                            var qq3 = p.FirstOrDefault(f => f.Code == _CodeMoin);
                                            var qq4 = _allHesabtafsili;
                                            AsnadeHesabdariRow obj2 = new AsnadeHesabdariRow();
                                            obj2.ShomareSanad = ShomarandeSanad;
                                            obj2.Tarikh = TarikhSanad;
                                            obj2.HesabMoinId = qq3.Id;
                                            obj2.HesabMoinCode = qq3.Code;
                                            obj2.HesabMoinName = qq3.Name;
                                            obj2.HesabTafId = qq4.Id;
                                            obj2.HesabTafCode = qq4.Code;
                                            obj2.HesabTafName = qq4.Name;
                                            obj2.Bes = MablaghAghsat;
                                            obj2.Sharh = _SharhAghsat;
                                            obj2.SalMaliId = _SalMaliId;

                                            ListAsnadeHesabdariRow.Add(obj2);


                                        }
                                    }
                                }




                                //XtraMessageBox.Show("اطلاعات با موفقیت ثبت شد", "پیغام ثبت ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                //En = EnumCED.Save;
                                //Fm.btnDisplyList2_Click(null, null);
                                //Fm.gridView2.MoveLast();
                                //this.Close();
                            }
                            db.HaghOzviats.AddRange(ListHaghOzviat);
                            db.AsnadeHesabdariRows.AddRange(ListAsnadeHesabdariRow);

                            db.SaveChanges();
                            XtraMessageBox.Show("صدور اسناد با موفقیت انجام شد" ,"پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);

                        }
                        catch (Exception ex)
                        {
                            XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                                "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }

                }
            }
            else
            {
                //XtraMessageBox.Show("اطلاعات ورودی صحیح نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
        }

        //private void SetDataGridViewToExcel()
        //{
        //    try
        //    {
        //        _Application app = new Microsoft.Office.Interop.Excel.Application();
        //        _Workbook workbook = app.Workbooks.Add(Type.Missing);
        //        _Worksheet worksheet = null;
        //        worksheet = workbook.Sheets["Sheet1"];
        //        worksheet = workbook.ActiveSheet;
        //        worksheet.Name = "Sheet1";
        //        worksheet.Columns.ColumnWidth = 13;
        //        //workbook.ActiveSheet.FileFormat = XlFileFormat.xlExcel8;

        //        // Storing header part in Excel   
        //        for (int i = 1; i < gridView1.Columns.Count + 1; i++)
        //        {
        //            worksheet.Cells[1, i] = gridView1.Columns[i - 1].Caption;
        //        }
        //        //worksheet.Columns["کد حساب"].ColumnWidth = gridView1.Columns["CodeHesab"].Width;
        //        //worksheet.Columns["نام حساب"].ColumnWidth = gridView1.Columns["NameAaza"].Width;
        //        //worksheet.Columns["مبلغ پس انداز"].ColumnWidth = gridView1.Columns["MablaghPasandaz"].Width;
        //        //worksheet.Columns["مبلغ اقساط"].ColumnWidth = gridView1.Columns["MablaghAghsat"].Width;
        //        //worksheet.Columns["کد وام"].ColumnWidth = gridView1.Columns["CodeVam"].Width;

        //        // Storing Each row and column value to excel sheet   
        //        for (int i = 0; i < gridView1.RowCount - 1; i++)
        //        {
        //            for (int j = 0; j < gridView1.Columns.Count; j++)
        //            {
        //                //worksheet.Cells[i + 2, j + 1] = gridView1.GetRowCellValue(i, gridView1.Columns[j]).ToString();
        //                worksheet.Cells[i + 2, j + 1] = gridView1.GetRowCellDisplayText(i, gridView1.Columns[j]).ToString();
        //            }
        //        }

        //        SaveFileDialog sfd = new SaveFileDialog();
        //        sfd.FileName = "Report_" + txtSal1.Text + "_" + cmbMonth1.SelectedIndex+1; 
        //        sfd.DefaultExt = ".xlsx";
        //        sfd.Title = "خروجی گزارش به اکسل";
        //        sfd.Filter = "Excel(*.xlsx)|*.xlsx";
        //        if (sfd.ShowDialog() == DialogResult.OK)
        //        {
        //            //workBook.SaveAs(@"C:\Users\" + userName + "\\Downloads\\ReportView.xls", Excel.XlFileFormat.xlWorkbookNormal, misValue, misValue, misValue, misValue, Excel.XlSaveAsAccessMode.xlExclusive, misValue, misValue, misValue, misValue, misValue);
        //            workbook.SaveAs(sfd.FileName, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
        //            //app.ActiveWorkbook.SaveAs(sfd.FileName, XlFileFormat.xlExcel8, null, null, null,
        //            //        null, XlSaveAsAccessMode.xlShared, null, null, null, null, null);

        //        }
        //        //workbook.Close(true, sfd.FileName, Type.Missing);
        //        //app.Quit();
        //        app.ActiveWorkbook.Saved = true;
        //        app.Quit();
        //        Process.Start("explorer.exe", sfd.FileName);

        //    }
        //    catch (Exception ex)
        //    {

        //        XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
        //                "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }




        //    #region MyRegion
        //    //SaveFileDialog sfd = new SaveFileDialog();
        //    //DialogResult drSaveFile = sfd.ShowDialog();
        //    //try
        //    //{
        //    //    if (drSaveFile == System.Windows.Forms.DialogResult.OK)
        //    //    {
        //    //        ApplicationClass ExcelApp = new ApplicationClass();
        //    //        //Microsoft.Office.Interop.Excel._Application app= new Microsoft.Office.Interop.Excel.Application();
        //    //        ExcelApp.Application.Workbooks.Add(Type.Missing);
        //    //        //ExcelApp.ActiveWorkbook.FileFormat = XlFileFormat.xlExcel8;   
        //    //        // Change properties of the Workbook   
        //    //        ExcelApp.Columns.ColumnWidth = 20;

        //    //        // Storing header part in Excel   
        //    //        for (int i = 1; i < gridView1.Columns.Count + 1; i++)
        //    //        {
        //    //            ExcelApp.Cells[1, i] = gridView1.Columns[i - 1].Caption;
        //    //        }

        //    //        // Storing Each row and column value to excel sheet   
        //    //        for (int i = 0; i < gridView1.RowCount-1; i++)
        //    //        {
        //    //            for (int j = 0; j < gridView1.Columns.Count; j++)
        //    //            {
        //    //                    ExcelApp.Cells[i + 2, j + 1] =  gridView1.GetRowCellValue(i, gridView1.Columns[j]).ToString();
        //    //                //if (j == 2 || j == 5)
        //    //                //{
        //    //                //}
        //    //                //else
        //    //                //{
        //    //                //    ExcelApp.Cells[i + 2, j + 1] = gridView1.GetRowCellValue(i, gridView1.Columns[j]).ToString();
        //    //                //}
        //    //            }
        //    //        }

        //    //        //Save Copy by giving file Path   
        //    //        //ExcelApp.ActiveWorkbook.SaveCopyAs("C:\\" + FileName);   

        //    //        //OR using SaveFileDialog   
        //    //        ExcelApp.ActiveWorkbook.SaveCopyAs(sfd.FileName);

        //    //        //OR even you can use SaveAs function   
        //    //        //ExcelApp.ActiveWorkbook.SaveAs(sfd.FileName, XlFileFormat.xlExcel8, null, null, null,   
        //    //        // null, XlSaveAsAccessMode.xlShared, null, null, null, null, null);   
        //    //        ExcelApp.ActiveWorkbook.Saved = true;
        //    //        ExcelApp.Quit();
        //    //    }
        //    //}
        //    //catch (Exception ex)
        //    //{
        //    //    MessageBox.Show("ERROR: " + ex.Message);
        //    //} 
        //    #endregion

        //    #region MyRegion1
        //    //string userID = WindowsIdentity.GetCurrent().Name;
        //    //var userName = userID.Remove(0, 15);
        //    ////test.Text = userName;
        //    ////dataGridView_ShowAllData
        //    //Excel.Application xlApp;
        //    //Excel.Workbook xlWorkBook;
        //    //Excel.Worksheet xlWorkSheet;
        //    //object misValue = System.Reflection.Missing.Value;

        //    //Int16 i, j;

        //    //xlApp = new Excel.Application();
        //    //xlWorkBook = xlApp.Workbooks.Add(misValue);

        //    //xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);

        //    //for (i = 0; i <= gridView1.RowCount - 2; i++)
        //    //{
        //    //    for (j = 0; j <= gridView1.Columns.Count - 1; j++)
        //    //    {
        //    //        xlWorkSheet.Cells[i + 1, j + 1] = gridView1.GetRowCellValue(i, gridView1.Columns[j]).ToString();
        //    //    }
        //    //}

        //    //xlWorkBook.SaveAs(@"C:\Users\" + userName + "\\Downloads\\ReportView.xls", Excel.XlFileFormat.xlWorkbookNormal, misValue, misValue, misValue, misValue, Excel.XlSaveAsAccessMode.xlExclusive, misValue, misValue, misValue, misValue, misValue);
        //    //xlWorkBook.Close(true, misValue, misValue);
        //    //xlApp.Quit();

        //    //releaseObject(xlWorkSheet);
        //    //releaseObject(xlWorkBook);
        //    //releaseObject(xlApp);

        //    //private void releaseObject(object obj)
        //    //{
        //    //    try
        //    //    {
        //    //        System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
        //    //        obj = null;
        //    //    }
        //    //    catch (Exception ex)
        //    //    {
        //    //        obj = null;
        //    //        MessageBox.Show("Exception Occured while releasing object " + ex.ToString());
        //    //    }
        //    //    finally
        //    //    {
        //    //        GC.Collect();
        //    //    }
        //    //}


        //    #endregion

        //}

        private void btnExportInfoToExcel_Click(object sender, EventArgs e)
        {
            HelpClass1.ExportDataGridViewToExcel(gridView1, gridView1.RowCount);
        }

        private void btnGetInfoFromExcel_Click(object sender, EventArgs e)
        {
            try
            {
                DataTable dt1 = new DataTable();
                dt1.Columns.Add("CodeHesab");
                dt1.Columns.Add("NameAaza");
                dt1.Columns.Add("MablaghPasandaz");
                dt1.Columns.Add("MablaghAghsat");
                dt1.Columns.Add("CodeVam");
                dt1.Columns["MablaghPasandaz"].DataType = typeof(Decimal);
                dt1.Columns["MablaghAghsat"].DataType = typeof(Decimal);




                Microsoft.Office.Interop.Excel.Application excel = new Microsoft.Office.Interop.Excel.Application();
                OpenFileDialog ofd = new OpenFileDialog();
                ofd.Filter = "Excel(*.xlsx)|*.xlsx";
                ofd.Title = "دریافت اطلاعات از اکسل";
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    string filepach = ofd.FileName;
                    Workbook workbook = excel.Workbooks.Open(filepach);
                    Worksheet worksheet = workbook.Worksheets[1];
                    Range range = worksheet.UsedRange;
                    //gridView1.BeginSort();
                    for (int i = 2; i <= range.Rows.Count; i++)
                    {
                        DataRow DataRow1 = dt1.NewRow();
                        DataRow1["CodeHesab"] = worksheet.Cells[i, 1].Value.ToString();
                        DataRow1["NameAaza"] = worksheet.Cells[i, 2].Value.ToString();
                        DataRow1["MablaghPasandaz"] = worksheet.Cells[i, 3].Value.ToString();
                        DataRow1["MablaghAghsat"] = worksheet.Cells[i, 4].Value.ToString();
                        DataRow1["CodeVam"] = worksheet.Cells[i, 5].Value.ToString();
                        dt1.Rows.Add(DataRow1);


                        //gridView1.SetRowCellValue(i - 2, gridView1.Columns["CodeHesab"], worksheet.Cells[i, 1].Value.ToString());
                        //gridView1.SetRowCellValue(i - 2, gridView1.Columns["NameAaza"], worksheet.Cells[i, 2].Value.ToString());
                        //gridView1.SetRowCellValue(i - 2, gridView1.Columns["MablaghPasandaz"], worksheet.Cells[i, 3].Value.ToString());
                        //gridView1.SetRowCellValue(i - 2, gridView1.Columns["MablaghAghsat"], worksheet.Cells[i, 4].Value.ToString());
                        //gridView1.SetRowCellValue(i - 2, gridView1.Columns["CodeVam"], worksheet.Cells[i, 5].Value.ToString());

                    }
                    //gridView1.EndSort();

                    if (gridControl1.DataSource == null)
                    {
                        gridControl1.DataSource = dt1;
                    }
                    else if (XtraMessageBox.Show("آیا اطلاعات جدید جایگزین شود؟",
                                 "پیغام", MessageBoxButtons.YesNo) == DialogResult.Yes)
                    {
                        gridControl1.DataSource = dt1;

                    }

                    workbook.Close(true, ofd.FileName, Type.Missing);
                    excel.Quit();


                }

            }
            catch (Exception ex)
            {

                XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void gridView1_RowCountChanged(object sender, EventArgs e)
        {
            btnSetInfoToExcel.Enabled = gridView1.RowCount > 0 ? true : false;
            btnTestInfo.Enabled = gridView1.RowCount > 0 ? true : false;
        }

        private void gridView1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.E)
            {
                HelpClass1.ExportDataGridViewToExcel(gridView1, gridView1.RowCount);
            }

        }
    }
}