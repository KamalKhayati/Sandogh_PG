using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Sandogh_PG;
using System.IO;
using System.Management;
using System.Data.Entity;

namespace Sandogh_PG
{
    public partial class FrmTarifSandogh : DevExpress.XtraEditors.XtraForm
    {
        FrmMain Fm;
        public FrmTarifSandogh(FrmMain fm)
        {
            InitializeComponent();
            Fm = fm;
            //        // This line of code is generated by Data Source Configuration Wizard
            //        // Instantiate a new DBContext
            //        Sandogh_PG.MyContext dbContext = new Sandogh_PG.MyContext();
            //        // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //        dbContext.MasolinSandoghs.LoadAsync().ContinueWith(loadTask =>
            //        {
            //// Bind data to control when loading complete
            //gridControl1.DataSource = dbContext.MasolinSandoghs.Local.ToBindingList();
            //        }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void FrmTarifSandogh_Load(object sender, EventArgs e)
        {
            txtTarikhEjad.Text = DateTime.Now.ToString().Substring(0, 10);
            HelpClass1.DateTimeMask(txtTarikhEjad);

            using (var db = new MyContext())
            {
                try
                {
                    var q1 = db.TarifSandoghs.FirstOrDefault(s => s.Id == 1);
                    if (q1 != null)
                    {
                        txtNameSandogh.Text = q1.NameSandogh;
                        txtNameModir.Text = q1.NameModir;
                        txtAdress.Text = q1.Adress;
                        txtTell.Text = q1.Tell;
                        txtMobile.Text = q1.Mobile;
                        if (q1.TarikhEjad != null)
                            txtTarikhEjad.Text = q1.TarikhEjad.ToString().Substring(0, 10);
                        chkIsDefault.Checked = q1.IsDefault;
                        if (q1.Pictuer != null)
                        {
                            MemoryStream ms = new MemoryStream(q1.Pictuer);
                            pictureEdit1.Image = Image.FromStream(ms);
                            img = pictureEdit1.Image;

                        }
                        else
                            pictureEdit1.Image = null;

                        DataTable dt2 = new DataTable();
                        dt2.Columns.Add("MasolinName");
                        dt2.Columns.Add("SematName");
                        dt2.Columns.Add("MobilNumber");
                        dt2.Columns.Add("StartDate");
                        dt2.Columns.Add("EndDate");
                        dt2.Columns.Add("Tozihat");
                        //dt2.Columns["StartDate"].DataType = typeof(DateTime);
                        //dt2.Columns["EndDate"].DataType = typeof(DateTime);
                        //dt2.Columns["TedadZamen"].DataType = typeof(Int32);

                        var t = db.MasolinSandoghs.Where(s => s.SandoghId == q1.Id).ToList();
                        if (t.Count() > 0)
                        {
                            for (int i = 0; i < t.Count(); i++)
                            {
                                DataRow DataRow1 = dt2.NewRow();
                                if (t[i].MasolinName != null)
                                    DataRow1["MasolinName"] = t[i].MasolinName;
                                if (t[i].SematName != null)
                                    DataRow1["SematName"] = t[i].SematName;
                                if (t[i].MobilNumber != null)
                                    DataRow1["MobilNumber"] = t[i].MobilNumber;
                                if (t[i].StartDate != null)
                                    DataRow1["StartDate"] = t[i].StartDate;
                                if (t[i].EndDate != null)
                                    DataRow1["EndDate"] = t[i].EndDate;
                                if (t[i].Tozihat != null)
                                    DataRow1["Tozihat"] = t[i].Tozihat;
                                dt2.Rows.Add(DataRow1);
                            }

                        }

                        gridControl1.DataSource = dt2;
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        private void FrmTarifSandogh_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F5)
            {
                btnSaveClose_Click(sender, null);
            }
            else if (e.KeyCode == Keys.Escape)
            {
                btnClose_Click(sender, null);
            }

        }

        private void btnBrowsPictuer_Click(object sender, EventArgs e)
        {
            XtraOpenFileDialog XtraOpenFileDialog1 = new XtraOpenFileDialog();
            XtraOpenFileDialog1.Filter = "Image Files|*.bmp;*.jpg;*.jpeg;*.png;*.gif";

            if (XtraOpenFileDialog1.ShowDialog() == DialogResult.OK)
            {
                img = Image.FromFile(XtraOpenFileDialog1.FileName);
                this.pictureEdit1.Image = img;
                //this.pictureEdit1.Tag = openFileDialog1.FileName;

            }
        }

        //string CopyPictuer(string sourcefile, string key)
        //{
        //    if (sourcefile == "")
        //        return null;
        //    string curentPath;
        //    string newPath;
        //    curentPath = Application.StartupPath + @"\image\";
        //    if (Directory.Exists(curentPath) == false)
        //    {
        //        Directory.CreateDirectory(curentPath);
        //    }

        //    newPath = curentPath + key + sourcefile.Substring(sourcefile.LastIndexOf("."));
        //    if (File.Exists(newPath))
        //    {
        //        File.Delete(newPath);
        //    }
        //    File.Copy(sourcefile, newPath);
        //    return newPath;
        //}

        private void btnDelete_Click(object sender, EventArgs e)
        {
            pictureEdit1.Image = null;
        }

        Image img;
        private void btnSaveClose_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtNameSandogh.Text))
            {
                XtraMessageBox.Show("لطفاً نام صندوق را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            else
            {
                using (var db = new MyContext())
                {
                    try
                    {
                        var q1 = db.TarifSandoghs.FirstOrDefault(s => s.Id == 1);
                        if (q1 != null)
                        {
                            q1.NameSandogh = txtNameSandogh.Text;
                            q1.NameModir = txtNameModir.Text;
                            q1.Adress = txtAdress.Text;
                            q1.Tell = txtTell.Text;
                            q1.Mobile = txtMobile.Text;
                            q1.IsDefault = chkIsDefault.Checked;
                            //q1.IsDefault = chkIsDefault.Checked;
                            if (!string.IsNullOrEmpty(txtTarikhEjad.Text))
                            {
                                q1.TarikhEjad = Convert.ToDateTime(txtTarikhEjad.Text.Substring(0, 10));

                            }
                            else
                                q1.TarikhEjad = Convert.ToDateTime(DateTime.Now.ToString().Substring(0, 10));

                            if (pictureEdit1.Image != null)
                            {
                                MemoryStream ms = new MemoryStream();
                                img.Save(ms, pictureEdit1.Image.RawFormat);
                                byte[] myarrey = ms.GetBuffer();
                                q1.Pictuer = myarrey;
                                //pictureEdit1.Image.Save(Application.StartupPath + "\\Pic\\Co_Logo_1.jpg");
                            }
                            else
                            {
                                q1.Pictuer = null;
                                //pictureEdit2.Image.Save(Application.StartupPath + "\\Pic\\Co_Logo_1.jpg");

                            }
                            /////////////////////////////////////////////////////////////////////
                            //string MadarBoardCode = string.Empty;
                            //ManagementObjectSearcher sercher2 = new ManagementObjectSearcher("select * from Win32_BaseBoard");
                            //foreach (ManagementObject wmi_Board in sercher2.Get())
                            //{
                            //    if (wmi_Board["SerialNumber"] != null)
                            //        MadarBoardCode = wmi_Board["SerialNumber"].ToString().Trim();
                            //}
                            //if (q1.MadarBoardCode != MadarBoardCode.Substring(0, 10))
                            //{
                            //    q1.MadarBoardCode = MadarBoardCode.Substring(0, 10);
                            //    db.SaveChanges();
                            //}


                            if (gridView1.RowCount > 0)
                            {
                                var ms = db.MasolinSandoghs.Where(s => s.SandoghId == q1.Id).ToList();
                                if (ms.Count > 0)
                                    db.MasolinSandoghs.RemoveRange(ms);

                                DataTable dt = HelpClass1.ConvettDatagridviewToDataTable(gridView1, gridView1.RowCount - 1);
                                if (dt.Rows.Count > 0)
                                {
                                    List<MasolinSandogh> List = new List<MasolinSandogh>();
                                    for (int i = 0; i < dt.Rows.Count; i++)
                                    {
                                        MasolinSandogh obj = new MasolinSandogh();
                                        obj.MasolinName = string.IsNullOrEmpty(dt.Rows[i][0].ToString()) ? null : dt.Rows[i][0].ToString();
                                        obj.SematName = string.IsNullOrEmpty(dt.Rows[i][1].ToString()) ? null : dt.Rows[i][1].ToString();
                                        obj.MobilNumber = string.IsNullOrEmpty(dt.Rows[i][2].ToString()) ? null : dt.Rows[i][2].ToString();
                                        if (!string.IsNullOrEmpty(dt.Rows[i][3].ToString()))
                                        {
                                            if (dt.Rows[i][3].ToString().Length != 10)
                                            {
                                                XtraMessageBox.Show("تاریخ شروع مسئولیت " + obj.MasolinName + " اشتباه است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }
                                            else
                                                obj.StartDate =  dt.Rows[i][3].ToString();

                                        } 
                                        else
                                            obj.StartDate =  null;

                                        if (!string.IsNullOrEmpty(dt.Rows[i][4].ToString()))
                                        {
                                            if (dt.Rows[i][4].ToString().Length != 10)
                                            {
                                                XtraMessageBox.Show("تاریخ پایان مسئولیت " + obj.MasolinName + " اشتباه است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }
                                            else
                                                obj.EndDate = dt.Rows[i][4].ToString();

                                        }
                                        else
                                            obj.EndDate =  null;

                                        //if (!string.IsNullOrEmpty(dt.Rows[i][3].ToString()))
                                        //    obj.StartDate = Convert.ToDateTime(dt.Rows[i][3]);
                                        //if (!string.IsNullOrEmpty(dt.Rows[i][4].ToString()))
                                        //    obj.EndDate = Convert.ToDateTime(dt.Rows[i][4]);
                                        obj.Tozihat = string.IsNullOrEmpty(dt.Rows[i][5].ToString()) ? null : dt.Rows[i][5].ToString();
                                        List.Add(obj);
                                    }
                                    if (List.Count() > 0)
                                        //db.AnvaeVams.FirstOrDefault(s => s.Id == RowId).TedadZamenins = List;
                                        q1.MasolinSandoghs = List;

                                }
                                //db.SaveChanges();

                                //DataTable dt2 = new DataTable();
                                //dt2.Columns.Add("Mablagh");
                                //dt2.Columns.Add("TedadZamen");
                                //dt2.Columns["Mablagh"].DataType = typeof(Decimal);
                                //dt2.Columns["TedadZamen"].DataType = typeof(Int32);

                                //var t = db.TedadZamenins.Where(s => s.AnvaeVamId == RowId).ToList();
                                //if (t.Count() > 0)
                                //{
                                //    for (int i = 0; i < t.Count(); i++)
                                //    {
                                //        DataRow DataRow1 = dt2.NewRow();
                                //        DataRow1["Mablagh"] = t[i].Mablagh;
                                //        DataRow1["TedadZamen"] = t[i].TedadZamen;
                                //        dt2.Rows.Add(DataRow1);
                                //    }

                                //}


                            }

                        }
                        //else
                        //{
                        //    TarifSandogh obj = new TarifSandogh();
                        //    obj.NameSandogh = txtNameSandogh.Text;
                        //    obj.NameModir = txtNameModir.Text;
                        //    obj.Adress = txtAdress.Text;
                        //    obj.Tell = txtTell.Text;
                        //    obj.Mobile = txtMobile.Text;
                        //    obj.IsDefault = chkIsDefault.Checked;
                        //    if (!string.IsNullOrEmpty(txtTarikhEjad.Text))
                        //        obj.TarikhEjad = Convert.ToDateTime(txtTarikhEjad.Text.Substring(0, 10));
                        //    else
                        //        q1.TarikhEjad = Convert.ToDateTime(DateTime.Now.ToString().Substring(0, 10));
                        //    if (pictureEdit1.Image != null)
                        //    {
                        //        MemoryStream ms = new MemoryStream();
                        //        img.Save(ms, pictureEdit1.Image.RawFormat);
                        //        byte[] myarrey = ms.GetBuffer();
                        //        obj.Pictuer = myarrey;
                        //    }
                        //    else
                        //        obj.Pictuer = null;
                        //    obj.PicBackground = null;
                        //    db.TarifSandoghs.Add(obj);
                        //}




                        db.SaveChanges();
                        //gridControl1.DataSource = ms;
                        XtraMessageBox.Show("اطلاعات با موفقیت ثبت گردید", "پیغام ثبت ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //Fm.FrmMain_Load(null, null);
                        //Fm.pictureEdit1.Image = pictureEdit1.Image;
                        if (q1.Pictuer != null)
                        {
                            MemoryStream ms = new MemoryStream(q1.Pictuer);
                            Fm.pictureEdit1.Image = Image.FromStream(ms);
                            img = pictureEdit1.Image;
                        }
                        else
                            Fm.pictureEdit1.Image = null;


                        this.Close();
                    }
                    catch (Exception ex)
                    {
                        XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message, "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void gridView1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.E)
            {
                HelpClass1.ExportDataGridViewToExcel(gridView1, gridView1.RowCount);
            }
        }
    }
}