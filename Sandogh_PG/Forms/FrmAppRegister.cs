using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Management;
using DevExpress.XtraEditors;
using Nucs.JsonSettings;
using Nucs.JsonSettings.Fluent;
using System.Data.Entity;
using Sandogh_PG.Forms;

namespace Sandogh_PG
{
    public partial class FrmAppRegister : DevExpress.XtraEditors.XtraForm
    {
        //SettingsBag Settings { get; } = JsonSettings.Construct<SettingsBag>(AppVariable.fileName + @"\config.json").EnableAutosave().LoadNow();

        FrmMain Fm;
        public FrmAppRegister(FrmMain fm)
        {
            InitializeComponent();
            Fm = fm;
            //// This line of code is generated by Data Source Configuration Wizard
            //// Instantiate a new DBContext
            //Sandogh_PG.MyContext dbContext = new Sandogh_PG.MyContext();
            //// Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //dbContext.AllowedDevises.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    allowedDevisesBindingSource.DataSource = dbContext.AllowedDevises.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }
        public FrmAppRegister()
        {
            InitializeComponent();
        }

        public void FillDataSourceCmbDeviceID()
        {
            using (var db = new MyContext())
            {
                try
                {
                    var q = db.AllowedDevises.ToList();
                    allowedDevisesBindingSource.DataSource = q.Count > 0 ? q : null;
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        public void InformationChecked()
        {
            using (var db = new MyContext())
            {
                try
                {
                    deviceID = HelpClass1.GetMadarBoardSerial();
                    string dataBase = db.Database.Connection.Database;
                    string versionNumber = Application.ProductVersion;

                    var qp = db.AllowedDevises.ToList();
                    var d = qp.Where(s => s.DeviceID == deviceID).ToList();
                    if (d.Count > 0)
                    {
                        var f = d.Where(s => s.DataBaseName == dataBase).ToList();
                        if (f.Count > 0)
                        {
                            var x = f.FirstOrDefault(s => s.VersionNumber == versionNumber);
                            if (x != null)
                            {
                                if (Application.OpenForms["FrmMain"] == null)
                                {
                                    this.Close();

                                    FrmMain fm = new FrmMain();
                                    fm.txtUserId.Caption = _UserId;
                                    fm.txtUserName.Caption = _UserName;
                                    fm.txtDateTimeNow.Caption = DateTime.Now.ToString().Substring(0, 10);
                                    fm.NameDataBase.Caption = x.DataBaseName;
                                    fm.ShNoskheBarname.Caption = x.VersionNumber;
                                    //fm.IndexNameDataBase.Caption = cmbNameDataBaseSandogh.SelectedIndex.ToString();
                                    fm.Show();
                                }
                                else
                                {
                                    if (IsFormClosed)
                                    {
                                        this.Close();
                                        if (x.VersionType == "Orginal")
                                        {
                                            Fm.EtmamGaranti.Caption = "اتمام مدت پشتیبانی : " + x.GarantiEndData.ToString().Substring(0, 10);
                                            Fm.EtmamGaranti.ItemAppearance.Normal.ForeColor = x.GarantiEndData < DateTime.Now ? Color.Red : Color.FromArgb(40, 40, 40);
                                            Fm.EtmamGaranti.Visibility = Fm.btnTamdidGaranti.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
                                        }
                                        else if (x.VersionType == "Demo")
                                        {
                                            if (x.IsActive == true)
                                            {
                                                var y = db.AsnadeHesabdariRows.Count();
                                                if (y >= 200)
                                                {
                                                    x.IsActive = false;
                                                }
                                                db.SaveChanges();
                                            }
                                            Fm.EtmamGaranti.Visibility = Fm.btnTamdidGaranti.Visibility = DevExpress.XtraBars.BarItemVisibility.Never;
                                        }
                                        else
                                        {
                                            Fm.EtmamGaranti.Visibility = Fm.btnTamdidGaranti.Visibility = DevExpress.XtraBars.BarItemVisibility.Never;
                                        }

                                        Fm.ShNoskheBarname.Caption = x.VersionNumber;
                                        string _VersionName = x.VersionType == "Orginal" ? "اصلی" : x.VersionType == "Demo" ? "آزمایشی" : "نمایشی";
                                        Fm.barStaticItem4.Caption = "نسخه " + _VersionName + " برنامه :";

                                    }
                                    else
                                    {
                                        cmbDeviceID.EditValue = x.Id;
                                    }
                                }
                            }
                            else
                            {
                                if (Application.OpenForms["FrmMain"] == null)
                                {
                                    this.Visible = false;
                                    this.Close();

                                    var k = f.FirstOrDefault(s => s.DataBaseName == dataBase);
                                    if (k != null)
                                    {
                                        if ((k.VersionType == "Orginal" && k.GarantiEndData >= DateTime.Now && k.IsGaranti == true) || k.VersionType == "Demo" || k.VersionType == "Display")
                                        {
                                            k.VersionNumber = Application.ProductVersion;
                                            if (k.VersionType == "Orginal")
                                                k.LNVersionNumber = HelpClass1.EncryptText(Application.ProductVersion);
                                            //new MyContext().TarifSandoghs.FirstOrDefault(s => s.IsDefault == true).ShomareNoskheBarname = Application.ProductVersion;
                                            db.SaveChanges();

                                            FrmMain fm = new FrmMain();
                                            fm.txtUserId.Caption = _UserId;
                                            fm.txtUserName.Caption = _UserName;
                                            fm.txtDateTimeNow.Caption = DateTime.Now.ToString().Substring(0, 10);
                                            fm.NameDataBase.Caption = k.DataBaseName;
                                            fm.ShNoskheBarname.Caption = k.VersionNumber;
                                            //fm.IndexNameDataBase.Caption = cmbNameDataBaseSandogh.SelectedIndeg.ToString();
                                            fm.Show();
                                        }
                                        else if (k.VersionType == "Orginal" && k.GarantiEndData < DateTime.Now)
                                        {

                                            var rs = XtraMessageBox.Show("با  توجه به اینکه مدت پشتیبانی برنامه به اتمام رسیده است \n" + " لذا مجاز به استفاده از ورژن جدید برنامه نمی باشید\n " + "جهت تمدید پشتیبانی و استفاده از آپدیت جدید برنامه لطفاً با واحد پشتیبانی به شماره \n" + " 09148253244 تماس حاصل فرمایید ", "پیغام", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                                            if (rs == DialogResult.OK)
                                            {
                                                FrmPassword1 frm = new FrmPassword1(this);
                                                frm.Text = "تمدید مدت پشتیبانی";
                                                //frm.labelControl4.Visible = false;
                                                //frm.UserId = _UserId;
                                                //frm.UserName = _UserName;
                                                frm._Shenase = _Shenase;
                                                frm._Password = _Password;
                                                frm.ShowDialog();
                                            }
                                        }

                                    }
                                }
                                else
                                {
                                    if (IsFormClosed)
                                    {
                                        if (XtraMessageBox.Show("ورژن سخت افزار معرفی شده با ورژن برنامه یکی نیست لذا اجرای برنامه مقدور نمی باشد آیا برنامه بسته شود؟", "پیغام", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                                        {
                                            Application.Exit();
                                        }
                                        else
                                        {
                                            IsFormClosed = false;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (XtraMessageBox.Show("این دیتابیس مجوز دسترسی به اطلاعات برنامه را ندارد آیا برنامه بسته شود؟", "پیغام مجوز دسترسی", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                            {
                                this.Close();
                            }
                        }
                    }
                    else
                    {
                        if (XtraMessageBox.Show("این سخت افزار مجوز دسترسی به اطلاعات دیتابیس را ندارد آیا برنامه بسته شود؟", "پیغام مجوز دسترسی", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                        {
                            this.Close();
                        }
                    }

                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> InformationChecked()" + "\n" + ex.Message,
                        "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        //string HardSerial = "";
        string _RandomCode = "";
        private void frmAppRegister_Load(object sender, EventArgs e)
        {
            FillDataSourceCmbDeviceID();

            using (var db = new MyContext())
            {
                try
                {
                    HelpClass1.DateTimeMask(txtRegisterDate);
                    HelpClass1.DateTimeMask(txtGarantiEndData);
                    //txtRegisterDate.Text = DateTime.Now.ToString().Substring(0, 10);
                    labelControl1.Text = "My Device ID: " + HelpClass1.GetMadarBoardSerial();
                    labelControl2.Text = "My DataBace Name: " + db.Database.Connection.Database;
                    labelControl3.Text = "My Version Number : " + Application.ProductVersion;

                    _RandomCode = HelpClass1.RandomCode();
                    txtCode.Text = _RandomCode;
                    deviceID = HelpClass1.GetMadarBoardSerial();
                    string dataBase = db.Database.Connection.Database;
                    string versionNumber = Application.ProductVersion;
                    var pp = db.TarifSandoghs.FirstOrDefault(s => s.Id == 1);
                    //if (pp.MadarBoardCode.Length < 11)
                    //{
                    //    pp.MadarBoardCode = deviceID;
                    //    db.SaveChanges();
                    //}
                    var qp = db.AllowedDevises.ToList();
                    var z = qp.FirstOrDefault(s => s.DeviceID == "0123456789");
                    if (z != null)
                    {
                        //if (db.Database.Connection.Database == "Rahim_Elahi" || db.Database.Connection.Database == "Demo")
                        if (db.Database.Connection.Database == "Demo")
                        {
                            z.VersionType = "Demo";
                            //z.LNVersionType = HelpClass1.EncryptText("Demo");
                            //z.RegisterDate = pp.TarikhRegister;
                            z.VersionNumber = db.Database.Connection.Database;
                            //z.LNVersionNumber = HelpClass1.EncryptText(pp.ShomareNoskheBarname);
                            z.DeviceID = deviceID;
                            //p.LNDeviceID = HelpClass1.EncryptText(_DeviceID);
                            z.DataBaseName = db.Database.Connection.Database;
                            //p.LNDataBaseName = HelpClass1.EncryptText(db.Database.Connection.Database);
                            //z.GarantiEndData = Convert.ToDateTime("1397/01/01");
                            //p.LNGarantiEndData = HelpClass1.EncryptText(pp.TarikhEtmamGaranti.ToString().Substring(0, 10));
                            z.IsGaranti = false;
                            z.IsActive = true;

                            //pp.IsGaranti = false;
                            //pp.TarikhEtmamGaranti = Convert.ToDateTime("1397/01/01");
                            db.SaveChanges();

                            //Settings[AppVariable.GarantiDate[Convert.ToInt32(AppVariable.DefaltIndexCmbNameSandogh)]] = "1397/01/01";

                            this.Close();

                            FrmMain fm = new FrmMain();
                            fm.txtUserId.Caption = _UserId;
                            fm.txtUserName.Caption = _UserName;
                            fm.txtDateTimeNow.Caption = DateTime.Now.ToString().Substring(0, 10);
                            fm.NameDataBase.Caption = z.DataBaseName;
                            fm.ShNoskheBarname.Caption = z.VersionNumber;
                            //fm.IndexNameDataBase.Caption = cmbNameDataBaseSandogh.SelectedIndex.ToString();
                            fm.Show();




                        }
                        ////else if (db.Database.Connection.Database == "Harir_VA1"
                        ////    || db.Database.Connection.Database == "Harir_VZ1"
                        ////    || db.Database.Connection.Database == "Kapris_VA"
                        ////    || db.Database.Connection.Database == "Harir_VA1"
                        ////    || db.Database.Connection.Database == "Sandogh_Ehsan"
                        ////    || db.Database.Connection.Database == "Sandogh_PG"
                        ////    || db.Database.Connection.Database == "Sandogh_PG1")
                        //else if (db.Database.Connection.Database == "Harir_VA1"
                        //    || db.Database.Connection.Database == "Harir_VZ1"
                        //    || db.Database.Connection.Database == "Kapris_VA"
                        //    || db.Database.Connection.Database == "Harir_VA1"
                        //    || db.Database.Connection.Database == "Sandogh_Ehsan"
                        //    || db.Database.Connection.Database == "Sandogh_PG"
                        //    || db.Database.Connection.Database == "Sandogh_PG1")
                        //{

                        //    z.VersionType = "Orginal";
                        //    z.LNVersionType = HelpClass1.EncryptText("Orginal");
                        //    z.VersionNumber = pp.ShomareNoskheBarname;
                        //    z.LNVersionNumber = HelpClass1.EncryptText(pp.ShomareNoskheBarname);
                        //    z.DeviceID = deviceID;
                        //    z.LNDeviceID = HelpClass1.EncryptText(deviceID);
                        //    z.DataBaseName = db.Database.Connection.Database;
                        //    z.LNDataBaseName = HelpClass1.EncryptText(db.Database.Connection.Database);
                        //    z.GarantiEndData = pp.TarikhEtmamGaranti;
                        //    z.LNGarantiEndData = HelpClass1.EncryptText(pp.TarikhEtmamGaranti.ToString().Substring(0, 10));
                        //    z.RegisterDate = pp.TarikhRegister;
                        //    z.IsGaranti = pp.IsGaranti;
                        //    z.IsActive = true;

                        //    db.SaveChanges();

                        //    //Settings[AppVariable.GarantiDate[Convert.ToInt32(AppVariable.DefaltIndexCmbNameSandogh)]] = pp.TarikhEtmamGaranti.ToString().Substring(0, 10);

                        //    btnExit_Click(null, null);

                            //FrmMain fm = new FrmMain();
                            //fm.txtUserId.Caption = _UserId;
                            //fm.txtUserName.Caption = _UserName;
                            //fm.txtDateTimeNow.Caption = DateTime.Now.ToString().Substring(0, 10);
                            //fm.NameDataBase.Caption = z.DataBaseName;
                            //fm.ShNoskheBarname.Caption = z.VersionNumber;
                            ////fm.IndexNameDataBase.Caption = cmbNameDataBaseSandogh.SelectedIndex.ToString();
                            //fm.Show();


                        //}
                        else
                        {
                            cmbDeviceID.EditValue = z.Id;
                        }
                    }
                    else
                    {
                        var g = db.AllowedDevises.FirstOrDefault(s => s.DeviceID == deviceID && s.DataBaseName == dataBase);
                        if (g != null && g.VersionType == "Orginal")
                        {
                            if (g.VersionType != HelpClass1.DecryptText(g.LNVersionType)
                                || g.VersionNumber != HelpClass1.DecryptText(g.LNVersionNumber)
                                || g.DeviceID != HelpClass1.DecryptText(g.LNDeviceID)
                                || g.DataBaseName != HelpClass1.DecryptText(g.LNDataBaseName)
                                || g.GarantiEndData.ToString().Substring(0, 10) != HelpClass1.DecryptText(g.LNGarantiEndData).ToString().Substring(0, 10))
                            {
                                XtraMessageBox.Show("اطلاعات لاینسس برنامه تغییر پیدا کرده لذا برنامه بسته خواهد شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                this.Close();
                                return;
                            }
                        }

                        InformationChecked();

                        #region MyRegion
                        //var d = qp.Where(s => s.DeviceID == deviceID).ToList();
                        //if (d.Count > 0)
                        //{
                        //    var f = d.Where(s => s.DataBaseName == dataBase).ToList();
                        //    if (f.Count > 0)
                        //    {
                        //        var x = f.FirstOrDefault(s => s.VersionNumber == versionNumber);
                        //        if (x != null)
                        //        {
                        //            if (Application.OpenForms["FrmMain"] == null)
                        //            {
                        //                this.Close();

                        //                FrmMain fm = new FrmMain();
                        //                fm.txtUserId.Caption = _UserId;
                        //                fm.txtUserName.Caption = _UserName;
                        //                fm.txtDateTimeNow.Caption = DateTime.Now.ToString().Substring(0, 10);
                        //                fm.NameDataBase.Caption = x.DataBaseName;
                        //                fm.ShNoskheBarname.Caption = x.VersionNumber;
                        //                //fm.IndexNameDataBase.Caption = cmbNameDataBaseSandogh.SelectedIndex.ToString();
                        //                fm.Show();
                        //            }
                        //            else
                        //            {
                        //                cmbDeviceID.EditValue = x.Id;
                        //            }

                        //        }
                        //        else
                        //        {
                        //            if ((g.VersionType == "Orginal" && g.GarantiEndData >= DateTime.Now && g.IsGaranti == true) || g.VersionType == "Demo" || g.VersionType == "Display")
                        //            {
                        //                g.VersionNumber = Application.ProductVersion;
                        //                if (g.VersionType == "Orginal")
                        //                    g.LNVersionNumber = HelpClass1.EncryptText(Application.ProductVersion);
                        //                //new MyContext().TarifSandoghs.FirstOrDefault(s => s.IsDefault == true).ShomareNoskheBarname = Application.ProductVersion;
                        //                db.SaveChanges();

                        //                FrmMain fm = new FrmMain();
                        //                fm.txtUserId.Caption = _UserId;
                        //                fm.txtUserName.Caption = _UserName;
                        //                fm.txtDateTimeNow.Caption = DateTime.Now.ToString().Substring(0, 10);
                        //                fm.NameDataBase.Caption = db.Database.Connection.Database;
                        //                fm.ShNoskheBarname.Caption = g.VersionNumber;
                        //                //fm.IndexNameDataBase.Caption = cmbNameDataBaseSandogh.SelectedIndeg.ToString();
                        //                fm.Show();
                        //            }
                        //            else if (g.VersionType == "Orginal" && g.GarantiEndData < DateTime.Now)
                        //            {
                        //                //IsReady = false;
                        //                var rs = XtraMessageBox.Show("با  توجه به اینکه مدت پشتیبانی برنامه به اتمام رسیده است \n" + " لذا مجاز به استفاده از ورژن جدید برنامه نمی باشید\n " + "جهت تمدید پشتیبانی و استفاده از آپدیت جدید برنامه لطفاً با واحد پشتیبانی به شماره \n" + " 09148253244 تماس حاصل فرمایید ", "پیغام", MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                        //                if (rs == DialogResult.OK)
                        //                {
                        //                    this.Visible = false;
                        //                    this.Close();
                        //                    FrmPassword1 frm = new FrmPassword1(this);
                        //                    frm.Text = "تمدید مدت پشتیبانی";
                        //                    //frm.labelControl4.Visible = false;
                        //                    //frm.UserId = _UserId;
                        //                    //frm.UserName = _UserName;
                        //                    frm._Shenase = _Shenase;
                        //                    frm._Password = _Password;
                        //                    frm.ShowDialog();
                        //                }
                        //                else
                        //                    Application.Exit();
                        //            }

                        //            //XtraMessageBox.Show("این نسخه از برنامه مجوز دسترسی به اطلاعات دیتابیس را ندارد", "پیغام مجوز دسترسی", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //        }
                        //    }
                        //    else
                        //    {
                        //        XtraMessageBox.Show("این دیتابیس مجوز دسترسی به اطلاعات برنامه را ندارد", "پیغام مجوز دسترسی", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //    }
                        //}
                        //else
                        //{
                        //    XtraMessageBox.Show("این سخت افزار مجوز دسترسی به اطلاعات دیتابیس برنامه را ندارد", "پیغام مجوز دسترسی", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //    //btnCreate_Click(null, null);

                        //} 
                        #endregion
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> frmAppRegister_Load()" + "\n" + ex.Message,
                        "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private string ReveresString(string RandomCode)
        {
            try
            {
                char[] ch = RandomCode.ToCharArray();
                Array.Reverse(ch);
                return new string(ch);

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> ReveresString()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;
            }
        }

        private string GenerateSerial(string RandomCode)
        {
            try
            {
                string ReveresRandomCode = ReveresString(RandomCode);
                string Serial = string.Empty;
                string code = ReveresRandomCode.Substring(0, 10);
                for (int i = 0; i < code.Length; i++)
                {
                    char ch = char.Parse(code.Substring(i, 1));
                    Serial += ((int)ch).ToString();
                }
                string ReveresSerial = ReveresString(Serial);
                return ReveresSerial.Substring(0, 10);

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> GenerateSerial()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;

            }
        }

        public EnumCED En;

        public bool IsValidation()
        {
            using (var db = new MyContext())
            {
                try
                {
                    if (!string.IsNullOrEmpty(txtGarantiEndData.Text) && !string.IsNullOrEmpty(txtRegisterDate.Text))
                    {
                        if (Convert.ToInt32(txtGarantiEndData.Text.Substring(0, 4)) - Convert.ToInt32(txtRegisterDate.Text.Substring(0, 4)) > 1)
                        {
                            if (XtraMessageBox.Show("تاریخ اتمام مدت پشتیبانی بیشتر از یکسال است آیا مایلید اصلاح کنید؟", "پیغام", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                                return false;
                        }
                    }

                    if (db.AllowedDevises.Any(s => s.DeviceID == txtDeviceID.Text && s.DataBaseName == txtDataBase.Text) && En == EnumCED.Create)
                    {
                        XtraMessageBox.Show(" این سخت افزار با این دیتابیس قبلا مجوز دسترسی داده شده است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (comVersionType.SelectedIndex == -1)
                    {
                        XtraMessageBox.Show("نوع ورژن را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtLNVersionType.Text) && comVersionType.SelectedIndex == 0)
                    {
                        XtraMessageBox.Show("لاینسس نوع ورژن را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtRegisterDate.Text) && comVersionType.SelectedIndex == 0)
                    {
                        XtraMessageBox.Show("تاریخ ریجیستر را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtVersionNumber.Text))
                    {
                        XtraMessageBox.Show("شماره ورژن را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtLNVersionNumber.Text) && comVersionType.SelectedIndex == 0)
                    {
                        XtraMessageBox.Show("لاینسس شماره ورژن را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtDeviceID.Text))
                    {
                        XtraMessageBox.Show("آی دی دیوایس را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtLNDeviceID.Text) && comVersionType.SelectedIndex == 0)
                    {
                        XtraMessageBox.Show("لاینسس آی دی دیوایس را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtDataBase.Text))
                    {
                        XtraMessageBox.Show("نام دیتابیس را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtLNDataBase.Text) && comVersionType.SelectedIndex == 0)
                    {
                        XtraMessageBox.Show("لاینسس نام دیتابیس را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtGarantiEndData.Text) && comVersionType.SelectedIndex == 0)
                    {
                        XtraMessageBox.Show("تاریخ اتمام پشتیبانی را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(txtLNGarantiEndData.Text) && comVersionType.SelectedIndex == 0)
                    {
                        XtraMessageBox.Show("لاینسس تاریخ اتمام پشتیبانی را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (comIsGaranti.SelectedIndex == -1)
                    {
                        XtraMessageBox.Show("وضعیت پشتیبانی را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (comIsActive.SelectedIndex == -1)
                    {
                        XtraMessageBox.Show("وضعیت فعال را مشخص کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (comVersionType.SelectedIndex == 0)
                    {
                        if (comVersionType.Text != HelpClass1.DecryptText(txtLNVersionType.Text))
                        {
                            XtraMessageBox.Show("لاینسس نوع ورژن اشتباه است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (txtVersionNumber.Text != HelpClass1.DecryptText(txtLNVersionNumber.Text))
                        {
                            XtraMessageBox.Show("لاینسس شماره ورژن اشتباه است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (txtDeviceID.Text != HelpClass1.DecryptText(txtLNDeviceID.Text))
                        {
                            XtraMessageBox.Show("لاینسس آی دی دیوایس اشتباه است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (txtDataBase.Text != HelpClass1.DecryptText(txtLNDataBase.Text))
                        {
                            XtraMessageBox.Show("لاینسس دیتابیس اشتباه است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (txtGarantiEndData.Text != HelpClass1.DecryptText(txtLNGarantiEndData.Text))
                        {
                            XtraMessageBox.Show("لاینسس تاریخ اتمام پشتیبانی اشتباه است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                    }
                    else
                    {
                        string _VersionName = comVersionType.Text == "Orginal" ? "اصلی" : comVersionType.Text == "Demo" ? "آزمایشی" : "نمایشی";

                        if (!string.IsNullOrEmpty(txtLNVersionType.Text))
                        {
                            XtraMessageBox.Show("در حالت " + _VersionName + " لاینسس نوع ورژن لازم نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (!string.IsNullOrEmpty(txtLNVersionNumber.Text))
                        {
                            XtraMessageBox.Show("در حالت " + _VersionName + " لاینسس شماره ورژن لازم نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (!string.IsNullOrEmpty(txtLNDeviceID.Text))
                        {
                            XtraMessageBox.Show("در حالت " + _VersionName + " لاینسس آی دی دیوایس لازم نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (!string.IsNullOrEmpty(txtLNDataBase.Text))
                        {
                            XtraMessageBox.Show("در حالت " + _VersionName + " لاینسس دیتابیس لازم نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (!string.IsNullOrEmpty(txtLNGarantiEndData.Text))
                        {
                            XtraMessageBox.Show("در حالت " + _VersionName + " لاینسس تاریخ اتمام پشتیبانی لازم نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }

                    }

                    _VersionType = string.IsNullOrEmpty(comVersionType.Text) ? null : comVersionType.Text;
                    _LNVersionType = string.IsNullOrEmpty(txtLNVersionType.Text) ? null : txtLNVersionType.Text;
                    if (_VersionType == "Orginal")
                        _RegisterDate = Convert.ToDateTime(txtRegisterDate.Text);
                    _VersionNumber = string.IsNullOrEmpty(txtVersionNumber.Text) ? null : txtVersionNumber.Text;
                    _LNVersionNumber = string.IsNullOrEmpty(txtLNVersionNumber.Text) ? null : txtLNVersionNumber.Text;
                    _DeviceID = string.IsNullOrEmpty(txtDeviceID.Text) ? null : txtDeviceID.Text;
                    _LNDeviceID = string.IsNullOrEmpty(txtLNDeviceID.Text) ? null : txtLNDeviceID.Text;
                    _DataBaseName = string.IsNullOrEmpty(txtDataBase.Text) ? null : txtDataBase.Text;
                    _LNDataBaseName = string.IsNullOrEmpty(txtLNDataBase.Text) ? null : txtLNDataBase.Text;
                    if (_VersionType == "Orginal")
                        _GarantiEndData = Convert.ToDateTime(txtGarantiEndData.Text);
                    _LNGarantiEndData = string.IsNullOrEmpty(txtLNGarantiEndData.Text) ? null : txtLNGarantiEndData.Text;
                    _IsGaranti = Convert.ToBoolean(comIsGaranti.SelectedIndex);
                    _IsActive = Convert.ToBoolean(comIsActive.SelectedIndex);

                    return true;

                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> IsValidation()" + "\n" + ex.Message,
                        "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }

        }

        public string _UserId = string.Empty;
        public string _UserName = string.Empty;
        public string _Password = string.Empty;
        public string _Shenase = string.Empty;
        int yyyy1 = 0;
        int MM1 = 0;
        int dd1 = 0;

        string _VersionType = string.Empty;
        string _LNVersionType = string.Empty;
        DateTime _RegisterDate;
        string _VersionNumber = string.Empty;
        string _LNVersionNumber = string.Empty;
        string _DeviceID = string.Empty;
        string _LNDeviceID = string.Empty;
        string _DataBaseName = string.Empty;
        string _LNDataBaseName = string.Empty;
        DateTime _GarantiEndData;
        string _LNGarantiEndData = string.Empty;
        bool _IsGaranti = false;
        bool _IsActive = false;

        string deviceID = string.Empty;
        public string SetGarantiEndDate(string DeviceID, string DataBaseName, string VersionType)
        {
            using (var db = new MyContext())
            {
                try
                {
                    var q = db.AllowedDevises.FirstOrDefault(s => s.DeviceID == DeviceID && s.DataBaseName == DataBaseName);
                    if (q == null || (q != null && q.GarantiEndData <= DateTime.Now))
                    {
                        if (VersionType == "Orginal")
                        {
                            yyyy1 = Convert.ToInt32(DateTime.Now.ToString().Substring(0, 4));
                            MM1 = Convert.ToInt32(DateTime.Now.ToString().Substring(5, 2));
                            dd1 = Convert.ToInt32(DateTime.Now.ToString().Substring(8, 2));
                            Mydate d1 = new Mydate(yyyy1, MM1, dd1);
                            d1.IncrementYear();
                            //for (int i = 0; i < 12; i++)
                            //{
                            //    d1.IncrementMonth();
                            //}
                            return d1.ToString();

                        }
                        else
                        {
                            return string.Empty;
                        }
                    }
                    else if (q.GarantiEndData > DateTime.Now)
                    {
                        if (VersionType == "Orginal")
                        {
                            yyyy1 = Convert.ToInt32(q.GarantiEndData.ToString().Substring(0, 4));
                            MM1 = Convert.ToInt32(q.GarantiEndData.ToString().Substring(5, 2));
                            dd1 = Convert.ToInt32(q.GarantiEndData.ToString().Substring(8, 2));
                            Mydate d1 = new Mydate(yyyy1, MM1, dd1);
                            d1.IncrementYear();
                            //for (int i = 0; i < 12; i++)
                            //{
                            //    d1.IncrementMonth();
                            //}
                            return d1.ToString();

                        }
                        else
                        {
                            return string.Empty;
                        }

                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> SetGarantiEndDate()" + "\n" + ex.Message,
                        "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return string.Empty;
                }
                return string.Empty;
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {

                if (txtSerial.ReadOnly == false)
                {
                    if (txtSerial.Text == GenerateSerial(_RandomCode))
                    {
                        using (var db = new MyContext())
                        {
                            if (IsValidation())
                            {
                                int _Id = Convert.ToInt32(cmbDeviceID.EditValue);
                                if (_Id == 0)
                                {
                                    AllowedDevise obj = new AllowedDevise();
                                    obj.VersionType = _VersionType;
                                    obj.VersionNumber = _VersionNumber;
                                    obj.DeviceID = _DeviceID;
                                    obj.DataBaseName = _DataBaseName;
                                    obj.IsActive = _IsActive;

                                    if (_VersionType == "Orginal")
                                    {
                                        obj.LNVersionType = _LNVersionType;
                                        obj.LNVersionNumber = _LNVersionNumber;
                                        obj.LNDeviceID = _LNDeviceID;
                                        obj.LNDataBaseName = _LNDataBaseName;

                                        obj.GarantiEndData = _GarantiEndData;
                                        obj.LNGarantiEndData = _LNGarantiEndData;
                                        obj.RegisterDate = _RegisterDate;
                                        obj.IsGaranti = _IsGaranti;
                                    }
                                    else
                                    {
                                        obj.LNVersionType = string.Empty;
                                        obj.LNVersionNumber = string.Empty;
                                        obj.LNDeviceID = string.Empty;
                                        obj.LNDataBaseName = string.Empty;

                                        obj.GarantiEndData = Convert.ToDateTime("1397/01/01");
                                        obj.LNGarantiEndData = string.Empty;
                                        obj.RegisterDate = Convert.ToDateTime("1397/01/01");
                                        obj.IsGaranti = false;

                                    }

                                    db.AllowedDevises.Add(obj);
                                    db.SaveChanges();
                                    En = EnumCED.Save;
                                    FillDataSourceCmbDeviceID();
                                    XtraMessageBox.Show("اطلاعات جدید ذخیره شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                                else
                                {
                                    var q = db.AllowedDevises.FirstOrDefault(s => s.Id == _Id);
                                    if (q != null)
                                    {
                                        q.VersionType = _VersionType;
                                        q.VersionNumber = _VersionNumber;
                                        q.DeviceID = _DeviceID;
                                        q.DataBaseName = _DataBaseName;
                                        q.IsActive = _IsActive;

                                        if (_VersionType == "Orginal")
                                        {
                                            q.LNVersionType = _LNVersionType;
                                            q.LNVersionNumber = _LNVersionNumber;
                                            q.LNDeviceID = _LNDeviceID;
                                            q.LNDataBaseName = _LNDataBaseName;

                                            if (q.GarantiEndData.ToString().Substring(0, 10) != txtGarantiEndData.Text)
                                            {
                                                q.GarantiEndData = _GarantiEndData;
                                                q.LNGarantiEndData = _LNGarantiEndData;
                                                q.RegisterDate = Convert.ToDateTime(DateTime.Now.ToString().Substring(0, 10));
                                                q.IsGaranti = true;
                                            }
                                        }
                                        else
                                        {
                                            q.LNVersionType = string.Empty;
                                            q.LNVersionNumber = string.Empty;
                                            q.LNDeviceID = string.Empty;
                                            q.LNDataBaseName = string.Empty;

                                            q.GarantiEndData = Convert.ToDateTime("1397/01/01");
                                            q.LNGarantiEndData = string.Empty;
                                            q.RegisterDate = Convert.ToDateTime("1397/01/01");
                                            q.IsGaranti = false;
                                        }
                                        db.SaveChanges();
                                        En = EnumCED.Save;
                                        FillDataSourceCmbDeviceID();
                                        XtraMessageBox.Show("اطلاعات قبلی ویرایش شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }

                                //btnSave.Enabled = false;
                                btnCancel_Click(null, null);
                                //if(HelpClass1.GetMadarBoardSerial()==_DeviceID && db.Database.Connection.Database ==_DataBaseName)
                                //Settings[AppVariable.GarantiDate[Convert.ToInt32(AppVariable.DefaltIndexCmbNameSandogh)]] = _GarantiEndData.ToString().Substring(0, 10);
                            }
                        }
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(txtSerial.Text))
                            XtraMessageBox.Show("لطفاً سریال را وارد کنید");
                        else
                            XtraMessageBox.Show("سریال وردی اشتباه است");
                    }

                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> btnSave_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }


        private void FrmAppRegister_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {
                if (Fm != null)
                {
                    Fm.IsAllowed = false;
                }

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> FrmAppRegister_FormClosed()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnCreate_Click(object sender, EventArgs e)
        {
            using (var db = new MyContext())
            {
                try
                {
                    //_DeviceID = HelpClass1.GetMadarBoardSerial();
                    //var q = db.AllowedDevises.FirstOrDefault(s => s.DeviceID == _DeviceID);
                    //if (q != null)
                    //{
                    //    cmbDeviceID.EditValue = q.Id;
                    //}
                    //else
                    //{
                    if (Convert.ToInt32(cmbDeviceID.EditValue) != 0)
                        cmbDeviceID.EditValue = 0;
                    else
                        cmbDeviceID_EditValueChanged(null, null);

                    //comVersionType.SelectedIndex = 0;
                    //VersionNumber.Text = Application.ProductVersion;
                    //txtDeviceID.Text = HelpClass1.GetMadarBoardSerial();
                    //txtLNDeviceID.Text = HelpClass1.EncryptText(HelpClass1.GetMadarBoardSerial());
                    //txtDataBase.Text = new MyContext().Database.Connection.Database;
                    //txtLNDataBase.Text = HelpClass1.EncryptText(new MyContext().Database.Connection.Database);
                    //txtGarantiDateEnd.Text = SetGarantiEndDate(txtDeviceID.Text, comVersionType.Text);
                    //txtLNGarantiDateEnd.Text = HelpClass1.EncryptText(txtGarantiDateEnd.Text);
                    //comIsGaranti.SelectedIndex = 0;
                    //comIsActive.SelectedIndex = 0;


                    En = EnumCED.Create;
                    btnSave.Enabled = true;
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> btnCreate_Click()" + "\n" + ex.Message,
                        "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (Convert.ToInt32(cmbDeviceID.EditValue) != 0)
            {
                using (var db = new MyContext())
                {
                    try
                    {
                        if (XtraMessageBox.Show("لطفاً ازاطلاعات لاینسس نمایش داده شده برای سخت افزار انتخابی اسکرین شات گرفته شود \n" + "چون بعد از عملیات حذف ، اطلاعات لاینسس قابل بازیابی نخواهد بود", "پیغام", MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.OK)
                        {
                            int _Id = Convert.ToInt32(cmbDeviceID.EditValue);
                            var q = db.AllowedDevises.FirstOrDefault(s => s.Id == _Id);
                            if (q != null)
                            {
                                if (cmbDeviceID.Text == HelpClass1.GetMadarBoardSerial())
                                {
                                    if (q.DataBaseName == db.Database.Connection.Database)
                                    {
                                        XtraMessageBox.Show("سخت افزار و دیتابیس انتخابی با سخت افزار و دیتابیس جاری یکی می باشد \n" + "لذا قابل حذف نیست و فقط میتوان اطلاعات آنرا ویرایش نمود", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        //if (XtraMessageBox.Show("سخت افزار و دیتابیس انتخابی با سخت افزار و دیتابیس جاری یکی می باشد \n"+ "لذا با حذف آن دسترسی دیتابیس انتخابی به اطلاعات جاری حذف می گردد \n" + "آیا با این حال حذف گردد؟", "پیغام", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                                        //{
                                        //    db.AllowedDevises.Remove(q);
                                        //    db.SaveChanges();
                                        //        //Settings[AppVariable.GarantiDate[Convert.ToInt32(AppVariable.DefaltIndexCmbNameSandogh)]] = null;

                                        //    FillDataSourceCmbDeviceID();
                                        //    btnCreate_Click(null, null);

                                        //    //if (Application.OpenForms["FrmMain"] != null)
                                        //    //{
                                        //    //    if (XtraMessageBox.Show("برنامه بسته خواهد شد و جهت دسترسی دوباره نیاز به لاینسس مجدد خواهد بود", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information) == DialogResult.OK)
                                        //    //    {
                                        //    //        Application.Restart();
                                        //    //    }
                                        //    //}
                                        //}
                                    }
                                    else
                                    {
                                        if (XtraMessageBox.Show("آیا دسترسی دیتابیس انتخابی به اطلاعات جاری حذف گردد؟", "پیغام", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                                        {
                                            db.AllowedDevises.Remove(q);
                                            db.SaveChanges();
                                            FillDataSourceCmbDeviceID();
                                            btnCreate_Click(null, null);
                                        }
                                    }
                                }
                                else
                                {
                                    if (XtraMessageBox.Show("آیا دسترسی سخت افزار انتخابی به اطلاعات جاری حذف گردد؟", "پیغام", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                                    {
                                        db.AllowedDevises.Remove(q);
                                        db.SaveChanges();
                                        FillDataSourceCmbDeviceID();
                                        btnCreate_Click(null, null);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> btnDelete_Click()" + "\n" + ex.Message,
                            "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }

            }
            //if (Convert.ToInt32(cmbDeviceID.EditValue) == 0)
            //{
            //    comVersionType.SelectedIndex = -1;
            //    VersionNumber.Text = string.Empty;
            //    txtDeviceID.Text = string.Empty;
            //    txtLNDeviceID.Text = string.Empty;
            //    txtDataBase.Text = string.Empty;
            //    txtLNDataBase.Text = string.Empty;
            //    txtGarantiDateEnd.Text = string.Empty;
            //    txtLNGarantiDateEnd.Text = string.Empty;
            //    comIsGaranti.SelectedIndex = -1;
            //    comIsActive.SelectedIndex = -1;

            //    _DeviceID = string.Empty;
            //}
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            try
            {
                if (Convert.ToInt32(cmbDeviceID.EditValue) > 0)
                {
                    comVersionType.ReadOnly = false;
                    txtLNVersionType.ReadOnly = false;
                    comIsGaranti.ReadOnly = false;
                    comIsActive.ReadOnly = false;
                    txtRegisterDate.ReadOnly = false;
                    txtVersionNumber.ReadOnly = false;
                    txtLNVersionNumber.ReadOnly = false;
                    txtDeviceID.ReadOnly = false;
                    txtLNDeviceID.ReadOnly = false;
                    txtDataBase.ReadOnly = false;
                    txtLNDataBase.ReadOnly = false;
                    txtGarantiEndData.ReadOnly = false;
                    txtLNGarantiEndData.ReadOnly = false;

                    txtSerial.ReadOnly = false;

                    En = EnumCED.Edit;
                    btnSave.Enabled = true;
                }

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> btnEdit_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void cmbDeviceID_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                if (Convert.ToInt32(cmbDeviceID.EditValue) > 0)
                {
                    using (var db = new MyContext())
                    {
                        int _Id = Convert.ToInt32(cmbDeviceID.EditValue);
                        var q = db.AllowedDevises.FirstOrDefault(s => s.Id == _Id);
                        if (q != null)
                        {
                            comVersionType.SelectedIndex = q.VersionType == "Orginal" ? 0 : q.VersionType == "Demo" ? 1 : 2;
                            txtLNVersionType.Text = q.LNVersionType;
                            comIsGaranti.SelectedIndex = Convert.ToInt32(q.IsGaranti);
                            comIsActive.SelectedIndex = Convert.ToInt32(q.IsActive);
                            txtRegisterDate.Text = comVersionType.SelectedIndex == 0 ? q.RegisterDate.ToString().Substring(0, 10) : string.Empty;
                            txtVersionNumber.Text = q.VersionNumber;
                            txtLNVersionNumber.Text = q.LNVersionNumber;
                            txtDeviceID.Text = q.DeviceID;
                            txtLNDeviceID.Text = q.LNDeviceID;
                            txtDataBase.Text = q.DataBaseName;
                            txtLNDataBase.Text = q.LNDataBaseName;
                            txtGarantiEndData.Text = comVersionType.SelectedIndex == 0 ? q.GarantiEndData.ToString().Substring(0, 10) : string.Empty;
                            txtLNGarantiEndData.Text = q.LNGarantiEndData;


                            comVersionType.ReadOnly = true;
                            txtLNVersionType.ReadOnly = true;
                            comIsGaranti.ReadOnly = true;
                            comIsActive.ReadOnly = true;
                            txtRegisterDate.ReadOnly = true;
                            txtVersionNumber.ReadOnly = true;
                            txtLNVersionNumber.ReadOnly = true;
                            txtDeviceID.ReadOnly = true;
                            txtLNDeviceID.ReadOnly = true;
                            txtDataBase.ReadOnly = true;
                            txtLNDataBase.ReadOnly = true;
                            txtGarantiEndData.ReadOnly = true;
                            txtLNGarantiEndData.ReadOnly = true;

                            txtSerial.ReadOnly = true;

                        }

                    }

                }
                else if (Convert.ToInt32(cmbDeviceID.EditValue) == 0)
                {
                    comVersionType.SelectedIndex = -1;
                    txtLNVersionType.Text = string.Empty;
                    txtRegisterDate.Text = string.Empty;
                    txtVersionNumber.Text = string.Empty;
                    txtLNVersionNumber.Text = string.Empty;
                    txtDeviceID.Text = string.Empty;
                    txtLNDeviceID.Text = string.Empty;
                    txtDataBase.Text = string.Empty;
                    txtLNDataBase.Text = string.Empty;
                    txtGarantiEndData.Text = string.Empty;
                    txtLNGarantiEndData.Text = string.Empty;
                    comIsGaranti.SelectedIndex = 0;
                    comIsActive.SelectedIndex = 0;

                    deviceID = string.Empty;

                    comVersionType.ReadOnly = false;
                    txtLNVersionType.ReadOnly = false;
                    comIsGaranti.ReadOnly = false;
                    comIsActive.ReadOnly = false;
                    txtRegisterDate.ReadOnly = false;
                    txtVersionNumber.ReadOnly = false;
                    txtLNVersionNumber.ReadOnly = false;
                    txtDeviceID.ReadOnly = false;
                    txtLNDeviceID.ReadOnly = false;
                    txtDataBase.ReadOnly = false;
                    txtLNDataBase.ReadOnly = false;
                    txtGarantiEndData.ReadOnly = false;
                    txtLNGarantiEndData.ReadOnly = false;

                    txtSerial.ReadOnly = false;

                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> cmbDeviceID_EditValueChanged()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void lblVersionType_Click(object sender, EventArgs e)
        {
            using (var db = new MyContext())
            {
                try
                {
                    deviceID = HelpClass1.GetMadarBoardSerial();
                    if (comVersionType.SelectedIndex == 0)
                    {
                        txtRegisterDate.Text = DateTime.Now.ToString().Substring(0, 10);
                        txtLNVersionType.Text = HelpClass1.EncryptText(comVersionType.Text);
                        txtVersionNumber.Text = Application.ProductVersion;
                        txtLNVersionNumber.Text = HelpClass1.EncryptText(Application.ProductVersion);
                        txtDeviceID.Text = deviceID;
                        txtLNDeviceID.Text = HelpClass1.EncryptText(deviceID);
                        txtDataBase.Text = db.Database.Connection.Database;
                        txtLNDataBase.Text = HelpClass1.EncryptText(db.Database.Connection.Database);
                        txtGarantiEndData.Text = SetGarantiEndDate(deviceID, txtDataBase.Text, "Orginal");
                        txtLNGarantiEndData.Text = HelpClass1.EncryptText(SetGarantiEndDate(deviceID, txtDataBase.Text, "Orginal"));
                        comIsGaranti.SelectedIndex = 1;
                        comIsActive.SelectedIndex = 1;
                    }
                    else if (comVersionType.SelectedIndex == 1)
                    {
                        txtRegisterDate.Text = string.Empty;
                        txtLNVersionType.Text = string.Empty;
                        txtVersionNumber.Text = Application.ProductVersion;
                        txtLNVersionNumber.Text = string.Empty;
                        txtDeviceID.Text = deviceID;
                        txtLNDeviceID.Text = string.Empty;
                        txtDataBase.Text = db.Database.Connection.Database;
                        txtLNDataBase.Text = string.Empty;
                        txtGarantiEndData.Text = string.Empty;
                        txtLNGarantiEndData.Text = string.Empty;
                        comIsGaranti.SelectedIndex = 0;
                        comIsActive.SelectedIndex = 1;
                    }
                    else if (comVersionType.SelectedIndex == 2)
                    {
                        txtRegisterDate.Text = string.Empty;
                        txtLNVersionType.Text = string.Empty;
                        txtVersionNumber.Text = Application.ProductVersion;
                        txtLNVersionNumber.Text = string.Empty;
                        txtDeviceID.Text = deviceID;
                        txtLNDeviceID.Text = string.Empty;
                        txtDataBase.Text = db.Database.Connection.Database;
                        txtLNDataBase.Text = string.Empty;
                        txtGarantiEndData.Text = string.Empty;
                        txtLNGarantiEndData.Text = string.Empty;
                        comIsGaranti.SelectedIndex = 0;
                        comIsActive.SelectedIndex = 0;
                    }


                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblVersionType_Click()" + "\n" + ex.Message,
                        "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        private void lblRegisterDate_Click(object sender, EventArgs e)
        {
            try
            {
                if (comVersionType.SelectedIndex == 0)
                    txtRegisterDate.Text = DateTime.Now.ToString().Substring(0, 10);
                else
                    txtRegisterDate.Text = string.Empty;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblRegisterDate_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblVersionNumber_Click(object sender, EventArgs e)
        {
            txtVersionNumber.Text = Application.ProductVersion;
        }

        private void lblLNVersionNumber_Click(object sender, EventArgs e)
        {
            try
            {
                if (comVersionType.SelectedIndex == 0)
                    txtLNVersionNumber.Text = HelpClass1.EncryptText(txtVersionNumber.Text);
                else
                    txtLNVersionNumber.Text = string.Empty;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblLNVersionNumber_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblDeviceID_Click(object sender, EventArgs e)
        {
            txtDeviceID.Text = HelpClass1.GetMadarBoardSerial();
        }

        private void lblLNDeviceID_Click(object sender, EventArgs e)
        {
            try
            {
                if (comVersionType.SelectedIndex == 0)
                    txtLNDeviceID.Text = HelpClass1.EncryptText(txtDeviceID.Text);
                else
                    txtLNDeviceID.Text = string.Empty;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblLNDeviceID_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblDataBase_Click(object sender, EventArgs e)
        {
            using (var db = new MyContext())
            {
                try
                {
                    txtDataBase.Text = db.Database.Connection.Database;
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblDataBase_Click()" + "\n" + ex.Message,
                        "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        private void lblLNDataBase_Click(object sender, EventArgs e)
        {
            try
            {
                if (comVersionType.SelectedIndex == 0)
                    txtLNDataBase.Text = HelpClass1.EncryptText(txtDataBase.Text);
                else
                    txtLNDataBase.Text = string.Empty;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblLNDataBase_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblGarantiEndData_Click(object sender, EventArgs e)
        {
            try
            {
                if (comVersionType.SelectedIndex == 0)
                    txtGarantiEndData.Text = SetGarantiEndDate(txtDeviceID.Text, txtDataBase.Text, comVersionType.Text);
                else
                    txtGarantiEndData.Text = string.Empty;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblGarantiEndData_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblLNGarantiDate_Click(object sender, EventArgs e)
        {
            try
            {
                if (comVersionType.SelectedIndex == 0)
                    txtLNGarantiEndData.Text = HelpClass1.EncryptText(txtGarantiEndData.Text);
                else
                    txtLNGarantiEndData.Text = string.Empty;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblLNGarantiDate_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblIsGaranti_Click(object sender, EventArgs e)
        {
            try
            {
                if (comVersionType.Text != "Orginal")
                {
                    comIsGaranti.SelectedIndex = 0;
                }
                else
                {
                    comIsGaranti.SelectedIndex = Convert.ToDateTime(txtGarantiEndData.Text) > DateTime.Now ? 1 : 0;
                }

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblIsGaranti_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblIsActive_Click(object sender, EventArgs e)
        {
            try
            {
                comIsActive.SelectedIndex = comVersionType.Text == "Display" ? 0 : 1;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblIsActive_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblCode_Click(object sender, EventArgs e)
        {
            try
            {
                _RandomCode = HelpClass1.RandomCode();
                txtCode.Text = _RandomCode;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblCode_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblLNVersionType_Click(object sender, EventArgs e)
        {
            try
            {
                if (comVersionType.SelectedIndex == 0)
                    txtLNVersionType.Text = HelpClass1.EncryptText(comVersionType.Text);
                else
                    txtLNVersionType.Text = string.Empty;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> lblLNVersionType_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lblcmbDeviceID_Click(object sender, EventArgs e)
        {
            FillDataSourceCmbDeviceID();
        }

        bool IsFormClosed = false;
        //bool IsReady = true;
        private void btnExit_Click(object sender, EventArgs e)
        {
            IsFormClosed = true;
            InformationChecked();
            #region MyRegion
            //using (var db = new MyContext())
            //{
            //    try
            //    {
            //        string db1 = new MyContext().Database.Connection.Database;
            //        string _deviseID = HelpClass1.GetMadarBoardSerial();
            //        var q = db.AllowedDevises.ToList();
            //        var w = q.Where(s => s.DeviceID == _deviseID).ToList();
            //        if (w.Count == 0)
            //        {
            //            XtraMessageBox.Show("این سخت افزار مجوز دسترسی به اطلاعات برنامه را ندارد لذا برنامه بسته خواهد شد ", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            //e.Cancel = true;
            //            //IsFormExit = true;
            //            //this.Visible = false;
            //            //Application.Exit();
            //            this.Close();
            //        }
            //        else
            //        {
            //            var r = w.Where(s => s.DataBaseName == db1).ToList();
            //            if (r.Count == 0)
            //            {
            //                XtraMessageBox.Show("این دیتابیس مجوز دسترسی به اطلاعات برنامه را ندارد لذا برنامه بسته خواهد شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                //e.Cancel = false;
            //                //IsFormExit = true;
            //                //Application.Exit();
            //                this.Close();
            //            }
            //            else
            //            {
            //                var t = r.FirstOrDefault(s => s.VersionNumber == Application.ProductVersion);
            //                if (t == null)
            //                {
            //                    if (XtraMessageBox.Show("ورژن سخت افزار معرفی شده با ورژن برنامه یکی نیست لذا اجرای برنامه مقدور نمی باشد آیا برنامه بسته شود؟", "پیغام", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.OK)
            //                    {
            //                        //e.Cancel = false;
            //                        //IsFormExit = true;
            //                        // Application.Exit();
            //                        this.Close();
            //                    }
            //                    else
            //                    {
            //                        cmbDeviceID.EditValue = r.FirstOrDefault().Id;
            //                    }
            //                }
            //                else
            //                {
            //                    this.Close();
            //                    if (Application.OpenForms["FrmMain"] == null)
            //                    {
            //                        FrmMain fm = new FrmMain();
            //                        fm.txtUserId.Caption = _UserId;
            //                        fm.txtUserName.Caption = _UserName;
            //                        fm.txtDateTimeNow.Caption = DateTime.Now.ToString().Substring(0, 10);
            //                        fm.NameDataBase.Caption = t.DataBaseName;
            //                        fm.ShNoskheBarname.Caption = t.VersionNumber;
            //                        fm.Show();
            //                    }
            //                    else
            //                    {
            //                        if (t.VersionType == "Orginal")
            //                        {
            //                            Fm.EtmamGaranti.Caption = "اتمام مدت پشتیبانی : " + t.GarantiEndData.ToString().Substring(0, 10);
            //                            Fm.EtmamGaranti.ItemAppearance.Normal.ForeColor = t.GarantiEndData < DateTime.Now ? Color.Red : Color.FromArgb(40, 40, 40);
            //                            Fm.EtmamGaranti.Visibility = Fm.btnTamdidGaranti.Visibility = DevExpress.XtraBars.BarItemVisibility.Always;
            //                        }
            //                        else if (t.VersionType == "Demo")
            //                        {
            //                            if (t.IsActive == true)
            //                            {
            //                                var y = db.AsnadeHesabdariRows.Count();
            //                                if (y / 2 >= 100)
            //                                {
            //                                    t.IsActive = false;
            //                                }
            //                                db.SaveChanges();
            //                            }
            //                            Fm.EtmamGaranti.Visibility = Fm.btnTamdidGaranti.Visibility = DevExpress.XtraBars.BarItemVisibility.Never;
            //                        }
            //                        else
            //                        {
            //                            Fm.EtmamGaranti.Visibility = Fm.btnTamdidGaranti.Visibility = DevExpress.XtraBars.BarItemVisibility.Never;
            //                        }

            //                        Fm.ShNoskheBarname.Caption = t.VersionNumber;
            //                        string _VersionName = t.VersionType == "Orginal" ? "اصلی" : t.VersionType == "Demo" ? "آزمایشی" : "نمایشی";
            //                        Fm.barStaticItem4.Caption = "نسخه " + _VersionName + " برنامه :";
            //                    }

            //                }
            //            }

            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
            //            "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    }
            //} 
            #endregion
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                comVersionType.ReadOnly = true;
                txtLNVersionType.ReadOnly = true;
                comIsGaranti.ReadOnly = true;
                comIsActive.ReadOnly = true;
                txtRegisterDate.ReadOnly = true;
                txtVersionNumber.ReadOnly = true;
                txtLNVersionNumber.ReadOnly = true;
                txtDeviceID.ReadOnly = true;
                txtLNDeviceID.ReadOnly = true;
                txtDataBase.ReadOnly = true;
                txtLNDataBase.ReadOnly = true;
                txtGarantiEndData.ReadOnly = true;
                txtLNGarantiEndData.ReadOnly = true;

                txtSerial.ReadOnly = true;

                En = EnumCED.Cancel;
                btnSave.Enabled = false;


            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات ذیل با خطا مواجه شد" + "\n" + "==> btnCancel_Click()" + "\n" + ex.Message,
                    "پیغام خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}